#!/usr/bin/env python
# -*- coding: utf-8 -*-
import psycopg2
import psycopg2.extras
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'dbname': 'wazir',
    'user': 'postgres',
    'password': '123',
    'host': 'localhost',
    'port': '5432'
}

class ColumnAdder:
    def __init__(self, config):
        self.config = config
        self.conn = None
        self.cursor = None

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
        try:
            self.conn = psycopg2.connect(**self.config)
            self.conn.autocommit = True
            self.cursor = self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {} –Ω–∞ {}:{}".format(
                self.config['dbname'], self.config['host'], self.config['port']))
            return True
        except psycopg2.Error as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {}".format(e))
            return False

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()
        print("üëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

    def get_table_columns(self, table_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        self.cursor.execute(f"""
            SELECT column_name, data_type, character_maximum_length
            FROM information_schema.columns
            WHERE table_name = '{table_name}'
            ORDER BY ordinal_position;
        """)
        return {row['column_name']: {'type': row['data_type'], 'length': row['character_maximum_length']} 
                for row in self.cursor.fetchall()}

    def add_missing_columns_to_drivers(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É drivers"""
        print("\nüîß –ê–Ω–∞–ª–∏–∑ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É drivers...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
        current_columns = self.get_table_columns('drivers')
        print(f"üìã –¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(current_columns.keys())}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        required_columns = {
            'driver_license_number': {'type': 'VARCHAR', 'default': None},
            'driver_license_issue_date': {'type': 'DATE', 'default': None},
            'birth_date': {'type': 'DATE', 'default': None},
            'callsign': {'type': 'VARCHAR', 'default': None},
            'city': {'type': 'VARCHAR', 'default': None},
            'tariff': {'type': 'VARCHAR', 'default': None},
            'taxi_park': {'type': 'VARCHAR', 'default': None},
            'activity': {'type': 'VARCHAR', 'default': None},
            'unique_id': {'type': 'VARCHAR', 'default': None},
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
        added_columns = 0
        for col_name, col_info in required_columns.items():
            if col_name not in current_columns:
                default_clause = f"DEFAULT '{col_info['default']}'" if col_info['default'] else ""
                try:
                    self.cursor.execute(f"""
                        ALTER TABLE drivers 
                        ADD COLUMN {col_name} {col_info['type']} {default_clause};
                    """)
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü {col_name} —Ç–∏–ø–∞ {col_info['type']} –≤ —Ç–∞–±–ª–∏—Ü—É drivers")
                    added_columns += 1
                except psycopg2.Error as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ {col_name}: {e}")
        
        if added_columns == 0:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ drivers")
        else:
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_columns} —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É drivers")
        
        return added_columns

    def add_missing_columns_to_orders(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É orders"""
        print("\nüîß –ê–Ω–∞–ª–∏–∑ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É orders...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
        current_columns = self.get_table_columns('orders')
        print(f"üìã –¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(current_columns.keys())}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        required_columns = {
            'payment_method': {'type': 'VARCHAR', 'default': 'cash'},
            'price': {'type': 'NUMERIC', 'default': 0},
            'notes': {'type': 'TEXT', 'default': None},
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
        added_columns = 0
        for col_name, col_info in required_columns.items():
            if col_name not in current_columns:
                default_clause = f"DEFAULT '{col_info['default']}'" if col_info['default'] is not None else ""
                try:
                    self.cursor.execute(f"""
                        ALTER TABLE orders 
                        ADD COLUMN {col_name} {col_info['type']} {default_clause};
                    """)
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü {col_name} —Ç–∏–ø–∞ {col_info['type']} –≤ —Ç–∞–±–ª–∏—Ü—É orders")
                    added_columns += 1
                except psycopg2.Error as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ {col_name}: {e}")
        
        if added_columns == 0:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ orders")
        else:
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_columns} —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É orders")
        
        return added_columns

    def add_missing_columns_to_cars(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É cars"""
        print("\nüîß –ê–Ω–∞–ª–∏–∑ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É cars...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
        current_columns = self.get_table_columns('cars')
        print(f"üìã –¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(current_columns.keys())}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        required_columns = {
            'vin': {'type': 'VARCHAR', 'default': None},
            'registration_date': {'type': 'DATE', 'default': None},
            'status': {'type': 'VARCHAR', 'default': 'active'},
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
        added_columns = 0
        for col_name, col_info in required_columns.items():
            if col_name not in current_columns:
                default_clause = f"DEFAULT '{col_info['default']}'" if col_info['default'] is not None else ""
                try:
                    self.cursor.execute(f"""
                        ALTER TABLE cars 
                        ADD COLUMN {col_name} {col_info['type']} {default_clause};
                    """)
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü {col_name} —Ç–∏–ø–∞ {col_info['type']} –≤ —Ç–∞–±–ª–∏—Ü—É cars")
                    added_columns += 1
                except psycopg2.Error as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ {col_name}: {e}")
        
        if added_columns == 0:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ cars")
        else:
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_columns} —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É cars")
        
        return added_columns

    def add_missing_columns_to_driver_users(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É driver_users"""
        print("\nüîß –ê–Ω–∞–ª–∏–∑ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É driver_users...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
        current_columns = self.get_table_columns('driver_users')
        print(f"üìã –¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(current_columns.keys())}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        required_columns = {
            'email': {'type': 'VARCHAR', 'default': None},
            'is_verified': {'type': 'BOOLEAN', 'default': 'false'},
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
        added_columns = 0
        for col_name, col_info in required_columns.items():
            if col_name not in current_columns:
                default_clause = f"DEFAULT {col_info['default']}" if col_info['default'] is not None else ""
                try:
                    self.cursor.execute(f"""
                        ALTER TABLE driver_users 
                        ADD COLUMN {col_name} {col_info['type']} {default_clause};
                    """)
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü {col_name} —Ç–∏–ø–∞ {col_info['type']} –≤ —Ç–∞–±–ª–∏—Ü—É driver_users")
                    added_columns += 1
                except psycopg2.Error as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ {col_name}: {e}")
        
        if added_columns == 0:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ driver_users")
        else:
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_columns} —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É driver_users")
        
        return added_columns

    def run(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Å—Ç–æ–ª–±—Ü–æ–≤"""
        print("üîß –ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        if not self.connect():
            return
        
        try:
            total_added = 0
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü—ã
            total_added += self.add_missing_columns_to_drivers()
            total_added += self.add_missing_columns_to_orders()
            total_added += self.add_missing_columns_to_cars()
            total_added += self.add_missing_columns_to_driver_users()
            
            print(f"\n‚úÖ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {total_added} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        finally:
            self.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
    adder = ColumnAdder(DB_CONFIG)
    adder.run()

if __name__ == "__main__":
    main() 