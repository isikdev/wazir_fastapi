"""add unique_id to drivers table

Revision ID: aa9ac8cf0ba1
Revises: f5e3d6f39600
Create Date: 2025-05-15 00:55:34.966993

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'aa9ac8cf0ba1'
down_revision = 'f5e3d6f39600'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_autoparks_id', table_name='autoparks')
    op.drop_table('autoparks')
    op.drop_index('ix_driver_cars_id', table_name='driver_cars')
    op.drop_table('driver_cars')
    op.drop_index('ix_driver_transactions_id', table_name='driver_transactions')
    op.drop_table('driver_transactions')
    op.drop_index('ix_driver_documents_id', table_name='driver_documents')
    op.drop_table('driver_documents')
    op.drop_index('ix_tariffs_id', table_name='tariffs')
    op.drop_table('tariffs')
    op.drop_index('ix_driver_verifications_id', table_name='driver_verifications')
    op.drop_table('driver_verifications')
    op.drop_index('ix_options_id', table_name='options')
    op.drop_table('options')
    op.drop_index('ix_driver_options_id', table_name='driver_options')
    op.drop_table('driver_options')
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.drop_table('users')
    op.alter_column('driver_users', 'phone',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.drop_constraint('driver_users_phone_key', 'driver_users', type_='unique')
    op.create_index(op.f('ix_driver_users_phone'), 'driver_users', ['phone'], unique=True)
    op.drop_column('driver_users', 'code_expiry')
    op.drop_column('driver_users', 'created_at')
    op.drop_column('driver_users', 'confirmation_code')
    op.add_column('drivers', sa.Column('birthdate', sa.Date(), nullable=False))
    op.add_column('drivers', sa.Column('driver_license_number', sa.String(length=50), nullable=False))
    op.add_column('drivers', sa.Column('tariff', sa.String(length=50), nullable=False))
    op.add_column('drivers', sa.Column('taxi_park', sa.String(length=100), nullable=True))
    op.add_column('drivers', sa.Column('activity', sa.Integer(), nullable=True))
    op.alter_column('drivers', 'full_name',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('drivers', 'callsign',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('drivers', 'city',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('drivers', 'rating',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index('ix_drivers_callsign', table_name='drivers')
    op.create_unique_constraint(None, 'drivers', ['driver_license_number'])
    op.drop_constraint('drivers_tariff_id_fkey', 'drivers', type_='foreignkey')
    op.drop_constraint('drivers_autopark_id_fkey', 'drivers', type_='foreignkey')
    op.drop_column('drivers', 'birth_date')
    op.drop_column('drivers', 'driver_license')
    op.drop_column('drivers', 'personal_number')
    op.drop_column('drivers', 'license_expiry_date')
    op.drop_column('drivers', 'address')
    op.drop_column('drivers', 'license_issue_date')
    op.drop_column('drivers', 'created_at')
    op.drop_column('drivers', 'last_online')
    op.drop_column('drivers', 'tariff_id')
    op.drop_column('drivers', 'autopark_id')
    op.drop_column('drivers', 'is_online')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('drivers', sa.Column('is_online', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('drivers', sa.Column('autopark_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('drivers', sa.Column('tariff_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('drivers', sa.Column('last_online', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('drivers', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('drivers', sa.Column('license_issue_date', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('drivers', sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('drivers', sa.Column('license_expiry_date', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('drivers', sa.Column('personal_number', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('drivers', sa.Column('driver_license', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('drivers', sa.Column('birth_date', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_foreign_key('drivers_autopark_id_fkey', 'drivers', 'autoparks', ['autopark_id'], ['id'])
    op.create_foreign_key('drivers_tariff_id_fkey', 'drivers', 'tariffs', ['tariff_id'], ['id'])
    op.drop_constraint(None, 'drivers', type_='unique')
    op.create_index('ix_drivers_callsign', 'drivers', ['callsign'], unique=False)
    op.alter_column('drivers', 'rating',
               existing_type=sa.String(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.alter_column('drivers', 'city',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('drivers', 'callsign',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('drivers', 'full_name',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.drop_column('drivers', 'activity')
    op.drop_column('drivers', 'taxi_park')
    op.drop_column('drivers', 'tariff')
    op.drop_column('drivers', 'driver_license_number')
    op.drop_column('drivers', 'birthdate')
    op.add_column('driver_users', sa.Column('confirmation_code', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('driver_users', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('driver_users', sa.Column('code_expiry', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_driver_users_phone'), table_name='driver_users')
    op.create_unique_constraint('driver_users_phone_key', 'driver_users', ['phone'])
    op.alter_column('driver_users', 'phone',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=False)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.create_table('driver_options',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('driver_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('option_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('activation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deactivation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], name='driver_options_driver_id_fkey'),
    sa.ForeignKeyConstraint(['option_id'], ['options.id'], name='driver_options_option_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='driver_options_pkey')
    )
    op.create_index('ix_driver_options_id', 'driver_options', ['id'], unique=False)
    op.create_table('options',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_recurring', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('recurring_period', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='options_pkey')
    )
    op.create_index('ix_options_id', 'options', ['id'], unique=False)
    op.create_table('driver_verifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('driver_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('verification_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('verified_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('verified_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('photos', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], name='driver_verifications_driver_id_fkey'),
    sa.ForeignKeyConstraint(['verified_by'], ['users.id'], name='driver_verifications_verified_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='driver_verifications_pkey')
    )
    op.create_index('ix_driver_verifications_id', 'driver_verifications', ['id'], unique=False)
    op.create_table('tariffs',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tariffs_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('commission_percent', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tariffs_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_tariffs_id', 'tariffs', ['id'], unique=False)
    op.create_table('driver_documents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('driver_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('passport_front', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('passport_back', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('license_front', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('license_back', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('driver_with_license', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('profile_photo', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('verification_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], name='driver_documents_driver_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='driver_documents_pkey')
    )
    op.create_index('ix_driver_documents_id', 'driver_documents', ['id'], unique=False)
    op.create_table('driver_transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('driver_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('transaction_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], name='driver_transactions_driver_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='driver_transactions_pkey')
    )
    op.create_index('ix_driver_transactions_id', 'driver_transactions', ['id'], unique=False)
    op.create_table('driver_cars',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('driver_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('make', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('model', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('year', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('license_plate', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('vin', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('sts', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('body_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('transmission', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('child_seats', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('boosters', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('has_sticker', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('has_lightbox', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('registration', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_park_car', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('front_photo', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('back_photo', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('right_photo', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('left_photo', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('interior_front_photo', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('interior_back_photo', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], name='driver_cars_driver_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='driver_cars_pkey')
    )
    op.create_index('ix_driver_cars_id', 'driver_cars', ['id'], unique=False)
    op.create_table('autoparks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='autoparks_pkey')
    )
    op.create_index('ix_autoparks_id', 'autoparks', ['id'], unique=False)
    # ### end Alembic commands ### 