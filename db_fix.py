#!/usr/bin/env python
# -*- coding: utf-8 -*-
import psycopg2
import psycopg2.extras
import sys
import time
from tabulate import tabulate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'dbname': 'wazir',
    'user': 'postgres',
    'password': '123',
    'host': 'localhost',
    'port': '5432'
}

class DatabaseFixer:
    def __init__(self, config):
        self.config = config
        self.conn = None
        self.cursor = None

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
        try:
            self.conn = psycopg2.connect(**self.config)
            self.conn.autocommit = True
            self.cursor = self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {} –Ω–∞ {}:{}".format(
                self.config['dbname'], self.config['host'], self.config['port']))
            return True
        except psycopg2.Error as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {}".format(e))
            return False

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()
        print("üëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

    def fix_missing_foreign_key_indexes(self):
        """–ü–æ–∏—Å–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π"""
        print("\nüîç –ü–æ–∏—Å–∫ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        
        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
        self.cursor.execute("""
            WITH fk_constraints AS (
                SELECT
                    tc.table_name,
                    kcu.column_name,
                    ccu.table_name AS foreign_table_name,
                    tc.constraint_name
                FROM
                    information_schema.table_constraints tc
                JOIN
                    information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name
                    AND tc.table_schema = kcu.table_schema
                JOIN
                    information_schema.constraint_column_usage ccu ON tc.constraint_name = ccu.constraint_name
                    AND tc.table_schema = ccu.table_schema
                WHERE
                    tc.constraint_type = 'FOREIGN KEY'
                    AND tc.table_schema = 'public'
            ),
            all_indexes AS (
                SELECT
                    t.relname AS table_name,
                    a.attname AS column_name,
                    ix.relname AS index_name
                FROM
                    pg_class t
                JOIN
                    pg_index i ON t.oid = i.indrelid
                JOIN
                    pg_class ix ON ix.oid = i.indexrelid
                JOIN
                    pg_attribute a ON a.attrelid = t.oid AND a.attnum = ANY(i.indkey)
                JOIN
                    pg_namespace n ON n.oid = t.relnamespace
                WHERE
                    t.relkind = 'r'
                    AND n.nspname = 'public'
            )
            SELECT
                fk.table_name,
                fk.column_name,
                fk.foreign_table_name,
                fk.constraint_name,
                i.index_name
            FROM
                fk_constraints fk
            LEFT JOIN
                all_indexes i ON i.table_name = fk.table_name AND i.column_name = fk.column_name
            WHERE
                i.index_name IS NULL
            ORDER BY
                fk.table_name, fk.column_name;
        """)
        
        missing_indexes = self.cursor.fetchall()
        
        if not missing_indexes:
            print("‚úÖ –í—Å–µ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã!")
            return
        
        # –í—ã–≤–æ–¥ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
        print("\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {} –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤:".format(len(missing_indexes)))
        table_data = []
        for row in missing_indexes:
            table_data.append([row['table_name'], row['column_name'], 
                              row['foreign_table_name'], row['constraint_name']])
        
        print(tabulate(table_data, headers=["–¢–∞–±–ª–∏—Ü–∞", "–°—Ç–æ–ª–±–µ—Ü", "–°—Å—ã–ª–∫–∞", "–ò–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"]))
        
        print("\n–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        created_indexes = 0
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        for row in missing_indexes:
            table_name = row['table_name']
            column_name = row['column_name']
            index_name = f"idx_{table_name}_{column_name}"
            
            try:
                self.cursor.execute(f"""
                    CREATE INDEX {index_name} ON {table_name} ({column_name});
                """)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å {index_name} –¥–ª—è {table_name}.{column_name}")
                created_indexes += 1
            except psycopg2.Error as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è {table_name}.{column_name}: {e}")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({created_indexes} –∏–∑ {len(missing_indexes)})")

    def find_tables_without_pk(self):
        """–ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü –±–µ–∑ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π"""
        print("\nüîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü –±–µ–∑ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π...")
        
        self.cursor.execute("""
            SELECT 
                c.relname AS table_name
            FROM 
                pg_class c
            JOIN 
                pg_namespace n ON n.oid = c.relnamespace
            LEFT JOIN 
                pg_constraint con ON con.conrelid = c.oid AND con.contype = 'p'
            WHERE 
                c.relkind = 'r' AND
                n.nspname = 'public' AND
                con.conname IS NULL
            ORDER BY 
                c.relname;
        """)
        
        tables_without_pk = self.cursor.fetchall()
        
        if not tables_without_pk:
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–º–µ—é—Ç –ø–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏!")
            return
        
        print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(tables_without_pk)} —Ç–∞–±–ª–∏—Ü –±–µ–∑ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π:")
        for row in tables_without_pk:
            table_name = row['table_name']
            print(f"  - {table_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            self.cursor.execute(f"""
                SELECT 
                    column_name, data_type
                FROM 
                    information_schema.columns
                WHERE 
                    table_schema = 'public' AND
                    table_name = '{table_name}'
                ORDER BY 
                    ordinal_position;
            """)
            
            columns = self.cursor.fetchall()
            possible_pk_columns = []
            
            # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è PK
            for col in columns:
                col_name = col['column_name']
                if col_name in ('id', f"{table_name}_id", f"{table_name.rstrip('s')}_id"):
                    possible_pk_columns.append(col_name)
            
            if possible_pk_columns:
                print(f"    –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è PK: {', '.join(possible_pk_columns)}")
                print(f"    –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PK –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ALTER TABLE {table_name} ADD PRIMARY KEY ({possible_pk_columns[0]});")
            else:
                print(f"    –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è PK. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ id")

    def vacuum_analyze(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ VACUUM ANALYZE –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ VACUUM ANALYZE...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        self.cursor.execute("""
            SELECT 
                tablename 
            FROM 
                pg_tables 
            WHERE 
                schemaname = 'public'
            ORDER BY 
                tablename;
        """)
        
        tables = self.cursor.fetchall()
        
        # VACUUM ANALYZE –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        total_tables = len(tables)
        for i, row in enumerate(tables, 1):
            table_name = row['tablename']
            progress = f"[{i}/{total_tables}]"
            try:
                print(f"{progress} –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ VACUUM ANALYZE –¥–ª—è {table_name}...", end="")
                # –û—Ç–∫–ª—é—á–∞–µ–º autocommit –¥–ª—è VACUUM
                old_isolation = self.conn.isolation_level
                self.conn.set_isolation_level(0)
                self.cursor.execute(f"VACUUM ANALYZE {table_name};")
                self.conn.set_isolation_level(old_isolation)
                print(" ‚úì")
            except psycopg2.Error as e:
                print(f" ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("‚úÖ VACUUM ANALYZE –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü")

    def check_sequences(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""
        print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
        self.cursor.execute("""
            SELECT 
                c.relname AS sequence_name,
                n.nspname AS schema_name,
                pg_get_serial_sequence(t.relname, a.attname) AS qualified_sequence,
                t.relname AS table_name,
                a.attname AS column_name
            FROM 
                pg_class c
            JOIN 
                pg_namespace n ON n.oid = c.relnamespace
            LEFT JOIN 
                pg_depend d ON d.objid = c.oid AND d.classid = 'pg_class'::regclass AND d.refclassid = 'pg_class'::regclass
            LEFT JOIN 
                pg_class t ON t.oid = d.refobjid AND t.relkind = 'r'
            LEFT JOIN 
                pg_attribute a ON a.attrelid = t.oid AND a.attnum = d.refobjsubid
            WHERE 
                c.relkind = 'S' AND n.nspname = 'public'
            ORDER BY 
                sequence_name;
        """)
        
        sequences = self.cursor.fetchall()
        
        if not sequences:
            print("‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        
        fixed_count = 0
        for seq in sequences:
            sequence_name = seq['sequence_name']
            table_name = seq['table_name']
            column_name = seq['column_name']
            qualified_sequence = seq['qualified_sequence']
            
            if not table_name or not column_name:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ
            try:
                self.cursor.execute(f"""
                    SELECT COALESCE(MAX({column_name}), 0) AS max_value
                    FROM {table_name};
                """)
                
                result = self.cursor.fetchone()
                max_value = result['max_value'] if result else 0
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                self.cursor.execute(f"""
                    SELECT last_value FROM {sequence_name};
                """)
                
                result = self.cursor.fetchone()
                last_value = result['last_value'] if result else 0
                
                if max_value > last_value:
                    print(f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {table_name}.{column_name}: " 
                          f"max_value={max_value}, last_value={last_value}")
                    
                    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    self.cursor.execute(f"""
                        SELECT setval('{qualified_sequence}', {max_value}, true);
                    """)
                    
                    print(f"‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å {sequence_name} —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {max_value}")
                    fixed_count += 1
            except psycopg2.Error as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {sequence_name}: {e}")
        
        if fixed_count:
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
        else:
            print("‚úÖ –í—Å–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ!")

    def check_corrupt_tables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        self.cursor.execute("""
            SELECT 
                tablename 
            FROM 
                pg_tables 
            WHERE 
                schemaname = 'public'
            ORDER BY 
                tablename;
        """)
        
        tables = self.cursor.fetchall()
        
        corrupt_tables = []
        for row in tables:
            table_name = row['tablename']
            try:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                self.cursor.execute(f"SELECT 1 FROM {table_name} LIMIT 1;")
                print(f"‚úì –¢–∞–±–ª–∏—Ü–∞ {table_name} –≤ –ø–æ—Ä—è–¥–∫–µ")
            except psycopg2.Error as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {e}")
                corrupt_tables.append((table_name, str(e)))
        
        if corrupt_tables:
            print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(corrupt_tables)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:")
            for table, error in corrupt_tables:
                print(f"  - {table}: {error}")
            print("\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å REINDEX –¥–ª—è —ç—Ç–∏—Ö —Ç–∞–±–ª–∏—Ü:")
            for table, _ in corrupt_tables:
                print(f"  REINDEX TABLE {table};")
        else:
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø–æ—Ä—è–¥–∫–µ!")

    def analyze_performance(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü
        print("\nüìè –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü:")
        self.cursor.execute("""
            SELECT
                table_name,
                pg_size_pretty(pg_total_relation_size(quote_ident(table_name))) AS total_size,
                pg_size_pretty(pg_relation_size(quote_ident(table_name))) AS table_size,
                pg_size_pretty(pg_total_relation_size(quote_ident(table_name)) - 
                               pg_relation_size(quote_ident(table_name))) AS index_size
            FROM
                information_schema.tables
            WHERE
                table_schema = 'public'
            ORDER BY
                pg_total_relation_size(quote_ident(table_name)) DESC
            LIMIT 10;
        """)
        
        tables_size = self.cursor.fetchall()
        
        table_data = []
        for row in tables_size:
            table_data.append([row['table_name'], row['table_size'], 
                              row['index_size'], row['total_size']])
        
        print(tabulate(table_data, headers=["–¢–∞–±–ª–∏—Ü–∞", "–†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã", "–†–∞–∑–º–µ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤", "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä"]))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        print("\nüîç –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã:")
        self.cursor.execute("""
            SELECT
                s.schemaname,
                s.relname AS table_name,
                s.indexrelname AS index_name,
                pg_size_pretty(pg_relation_size(s.indexrelid)) AS index_size,
                s.idx_scan AS index_scans
            FROM
                pg_stat_user_indexes s
            JOIN
                pg_index i ON s.indexrelid = i.indexrelid
            WHERE
                s.idx_scan = 0 AND
                NOT i.indisprimary AND
                NOT i.indisunique
            ORDER BY
                pg_relation_size(s.indexrelid) DESC;
        """)
        
        unused_indexes = self.cursor.fetchall()
        
        if unused_indexes:
            table_data = []
            for row in unused_indexes:
                table_data.append([row['table_name'], row['index_name'], 
                                  row['index_size'], row['index_scans']])
            
            print(tabulate(table_data, headers=["–¢–∞–±–ª–∏—Ü–∞", "–ò–Ω–¥–µ–∫—Å", "–†–∞–∑–º–µ—Ä", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"]))
            
            print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –∏–Ω–¥–µ–∫—Å–∞–º:")
            for row in unused_indexes:
                print(f"-- DROP INDEX IF EXISTS {row['index_name']}; -- —Ä–∞–∑–º–µ—Ä: {row['index_size']}")
        else:
            print("‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        print("\nüîí –¢–µ–∫—É—â–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        self.cursor.execute("""
            SELECT 
                blocked_locks.pid AS blocked_pid,
                blocked_activity.usename AS blocked_user,
                blocking_locks.pid AS blocking_pid,
                blocking_activity.usename AS blocking_user,
                blocked_activity.query AS blocked_statement
            FROM 
                pg_catalog.pg_locks blocked_locks
            JOIN 
                pg_catalog.pg_stat_activity blocked_activity ON blocked_activity.pid = blocked_locks.pid
            JOIN 
                pg_catalog.pg_locks blocking_locks ON blocking_locks.locktype = blocked_locks.locktype
                AND blocking_locks.DATABASE IS NOT DISTINCT FROM blocked_locks.DATABASE
                AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation
                AND blocking_locks.page IS NOT DISTINCT FROM blocked_locks.page
                AND blocking_locks.tuple IS NOT DISTINCT FROM blocked_locks.tuple
                AND blocking_locks.virtualxid IS NOT DISTINCT FROM blocked_locks.virtualxid
                AND blocking_locks.transactionid IS NOT DISTINCT FROM blocked_locks.transactionid
                AND blocking_locks.classid IS NOT DISTINCT FROM blocked_locks.classid
                AND blocking_locks.objid IS NOT DISTINCT FROM blocked_locks.objid
                AND blocking_locks.objsubid IS NOT DISTINCT FROM blocked_locks.objsubid
                AND blocking_locks.pid != blocked_locks.pid
            JOIN 
                pg_catalog.pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid
            WHERE 
                NOT blocked_locks.GRANTED;
        """)
        
        locks = self.cursor.fetchall()
        
        if locks:
            print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
            for lock in locks:
                print(f"–ü—Ä–æ—Ü–µ—Å—Å {lock['blocked_pid']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ–º {lock['blocking_pid']}")
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {lock['blocked_user']}, –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {lock['blocking_user']}")
                print(f"–ó–∞–ø—Ä–æ—Å: {lock['blocked_statement']}")
        else:
            print("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    def run_all_fixes(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        print("üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL...")
        
        if not self.connect():
            return
        
        try:
            # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
            self.fix_missing_foreign_key_indexes()
            self.find_tables_without_pk()
            self.vacuum_analyze()
            self.check_sequences()
            self.check_corrupt_tables()
            self.analyze_performance()
            
            print("\n‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        finally:
            self.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
    db_fixer = DatabaseFixer(DB_CONFIG)
    db_fixer.run_all_fixes()

if __name__ == "__main__":
    main() 