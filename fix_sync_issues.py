#!/usr/bin/env python
# -*- coding: utf-8 -*-
import psycopg2
import psycopg2.extras
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'dbname': 'wazir',
    'user': 'postgres',
    'password': '123',
    'host': 'localhost',
    'port': '5432'
}

def connect_to_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        conn.autocommit = True
        cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return conn, cursor
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)

def close_connection(conn, cursor):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    if cursor:
        cursor.close()
    if conn:
        conn.close()
    print("üëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

def fix_tariff_sync(cursor):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    cursor.execute("""
        SELECT d.id, d.full_name, d.tariff_id, d.tariff, t.name as tariff_name
        FROM drivers d
        LEFT JOIN tariffs t ON d.tariff_id = t.id
        ORDER BY d.id;
    """)
    
    drivers = cursor.fetchall()
    if not drivers:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö")
        return
    
    # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    print("\n–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤:")
    for driver in drivers:
        print(f"ID: {driver['id']}, –ò–º—è: {driver['full_name']}, ID —Ç–∞—Ä–∏—Ñ–∞: {driver['tariff_id']}, –¢–∞—Ä–∏—Ñ: {driver['tariff']}, –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞: {driver['tariff_name']}")
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å ID —Ç–∞—Ä–∏—Ñ–∞
    cursor.execute("""
        UPDATE drivers d
        SET tariff = t.name
        FROM tariffs t
        WHERE d.tariff_id = t.id AND d.tariff != t.name
        RETURNING d.id, d.full_name, d.tariff;
    """)
    
    updated_drivers = cursor.fetchall()
    if updated_drivers:
        print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π (–Ω–∞ –æ—Å–Ω–æ–≤–µ ID —Ç–∞—Ä–∏—Ñ–∞):")
        for driver in updated_drivers:
            print(f"ID: {driver['id']}, –ò–º—è: {driver['full_name']}, –¢–∞—Ä–∏—Ñ: {driver['tariff']}")
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ID —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    cursor.execute("""
        UPDATE drivers d
        SET tariff_id = t.id
        FROM tariffs t
        WHERE d.tariff = t.name AND (d.tariff_id IS NULL OR d.tariff_id != t.id)
        RETURNING d.id, d.full_name, d.tariff_id, d.tariff;
    """)
    
    updated_drivers = cursor.fetchall()
    if updated_drivers:
        print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã ID —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π (–Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞):")
        for driver in updated_drivers:
            print(f"ID: {driver['id']}, –ò–º—è: {driver['full_name']}, ID —Ç–∞—Ä–∏—Ñ–∞: {driver['tariff_id']}, –¢–∞—Ä–∏—Ñ: {driver['tariff']}")
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Ç–∞—Ä–∏—Ñ–∞
    cursor.execute("""
        UPDATE drivers 
        SET tariff = 'Business', 
            tariff_id = (SELECT id FROM tariffs WHERE name = 'Business' OR name ILIKE '%business%' LIMIT 1)
        WHERE tariff ILIKE '%business%' OR tariff ILIKE '%–±–∏–∑–Ω–µ—Å%'
        RETURNING id, full_name, tariff, tariff_id;
    """)
    
    updated_business = cursor.fetchall()
    if updated_business:
        print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –±–∏–∑–Ω–µ—Å-—Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π:")
        for driver in updated_business:
            print(f"ID: {driver['id']}, –ò–º—è: {driver['full_name']}, –¢–∞—Ä–∏—Ñ: {driver['tariff']}, ID —Ç–∞—Ä–∏—Ñ–∞: {driver['tariff_id']}")
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º-—Ç–∞—Ä–∏—Ñ–∞
    cursor.execute("""
        UPDATE drivers 
        SET tariff = '–≠–∫–æ–Ω–æ–º', 
            tariff_id = (SELECT id FROM tariffs WHERE name = '–≠–∫–æ–Ω–æ–º' OR name ILIKE '%—ç–∫–æ–Ω–æ–º%' LIMIT 1)
        WHERE tariff ILIKE '%—ç–∫–æ–Ω–æ–º%' OR tariff ILIKE '%econom%'
        RETURNING id, full_name, tariff, tariff_id;
    """)
    
    updated_economy = cursor.fetchall()
    if updated_economy:
        print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —ç–∫–æ–Ω–æ–º-—Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π:")
        for driver in updated_economy:
            print(f"ID: {driver['id']}, –ò–º—è: {driver['full_name']}, –¢–∞—Ä–∏—Ñ: {driver['tariff']}, ID —Ç–∞—Ä–∏—Ñ–∞: {driver['tariff_id']}")
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º—Ñ–æ—Ä—Ç-—Ç–∞—Ä–∏—Ñ–∞
    cursor.execute("""
        UPDATE drivers 
        SET tariff = '–ö–æ–º—Ñ–æ—Ä—Ç', 
            tariff_id = (SELECT id FROM tariffs WHERE name = '–ö–æ–º—Ñ–æ—Ä—Ç' OR name ILIKE '%–∫–æ–º—Ñ–æ—Ä—Ç%' LIMIT 1)
        WHERE tariff ILIKE '%–∫–æ–º—Ñ–æ—Ä—Ç%' OR tariff ILIKE '%comfort%'
        RETURNING id, full_name, tariff, tariff_id;
    """)
    
    updated_comfort = cursor.fetchall()
    if updated_comfort:
        print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç-—Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π:")
        for driver in updated_comfort:
            print(f"ID: {driver['id']}, –ò–º—è: {driver['full_name']}, –¢–∞—Ä–∏—Ñ: {driver['tariff']}, ID —Ç–∞—Ä–∏—Ñ–∞: {driver['tariff_id']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    cursor.execute("""
        SELECT d.id, d.full_name, d.tariff_id, d.tariff, t.name as tariff_name
        FROM drivers d
        LEFT JOIN tariffs t ON d.tariff_id = t.id
        ORDER BY d.id;
    """)
    
    final_drivers = cursor.fetchall()
    
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    for driver in final_drivers:
        is_synced = driver['tariff'] == driver['tariff_name'] if driver['tariff_name'] else False
        status = "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ" if is_synced else "‚ùå –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
        print(f"ID: {driver['id']}, –ò–º—è: {driver['full_name']}, ID —Ç–∞—Ä–∏—Ñ–∞: {driver['tariff_id']}, –¢–∞—Ä–∏—Ñ: {driver['tariff']}, –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞: {driver['tariff_name']} - {status}")
    
    # –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    synced_count = sum(1 for d in final_drivers if (d['tariff'] == d['tariff_name'] if d['tariff_name'] else False))
    total_count = len(final_drivers)
    print(f"\n–ò—Ç–æ–≥–æ: {synced_count} –∏–∑ {total_count} –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–º–µ—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã")

def fix_car_data_sync(cursor):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ cars –∏ driver_cars"""
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü cars –∏ driver_cars
    cursor.execute("""
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_name = 'cars' 
        ORDER BY ordinal_position;
    """)
    cars_columns = cursor.fetchall()
    
    cursor.execute("""
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_name = 'driver_cars' 
        ORDER BY ordinal_position;
    """)
    driver_cars_columns = cursor.fetchall()
    
    print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã cars:")
    for col in cars_columns:
        print(f"  {col['column_name']} ({col['data_type']})")
    
    print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã driver_cars:")
    for col in driver_cars_columns:
        print(f"  {col['column_name']} ({col['data_type']})")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
    cursor.execute("""
        SELECT c.id, c.driver_id, c.brand, c.model, c.license_plate, c.year, c.color
        FROM cars c
        ORDER BY c.driver_id;
    """)
    cars = cursor.fetchall()
    
    cursor.execute("""
        SELECT dc.id, dc.driver_id, dc.make AS brand, dc.model, dc.license_plate, dc.year, dc.color
        FROM driver_cars dc
        ORDER BY dc.driver_id;
    """)
    driver_cars = cursor.fetchall()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    cars_by_driver = {car['driver_id']: car for car in cars if car['driver_id']}
    driver_cars_by_driver = {dc['driver_id']: dc for dc in driver_cars if dc['driver_id']}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
    missing_in_driver_cars = []
    mismatched_data = []
    
    for driver_id, car in cars_by_driver.items():
        if driver_id not in driver_cars_by_driver:
            missing_in_driver_cars.append(car)
        else:
            driver_car = driver_cars_by_driver[driver_id]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö
            if (car['brand'] != driver_car['brand'] or 
                car['model'] != driver_car['model'] or 
                car['license_plate'] != driver_car['license_plate'] or 
                car['year'] != driver_car['year'] or 
                car['color'] != driver_car['color']):
                mismatched_data.append((car, driver_car))
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    for car in missing_in_driver_cars:
        try:
            cursor.execute("""
                INSERT INTO driver_cars (driver_id, make, model, license_plate, year, color)
                VALUES (%s, %s, %s, %s, %s, %s)
                RETURNING id;
            """, (
                car['driver_id'], car['brand'], car['model'], 
                car['license_plate'], car['year'], car['color']
            ))
            new_id = cursor.fetchone()[0]
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ driver_cars –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è ID: {car['driver_id']} (–Ω–æ–≤—ã–π ID: {new_id})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {car['driver_id']}: {e}")
    
    for car, driver_car in mismatched_data:
        try:
            cursor.execute("""
                UPDATE driver_cars
                SET make = %s, model = %s, license_plate = %s, year = %s, color = %s
                WHERE id = %s;
            """, (
                car['brand'], car['model'], car['license_plate'],
                car['year'], car['color'], driver_car['id']
            ))
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ driver_cars –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è ID: {car['driver_id']} (ID –∑–∞–ø–∏—Å–∏: {driver_car['id']})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {car['driver_id']}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    cursor.execute("""
        SELECT c.id as car_id, c.driver_id, c.brand as car_brand, c.model as car_model, 
               c.license_plate as car_plate, c.year as car_year, c.color as car_color,
               dc.id as dc_id, dc.make as dc_brand, dc.model as dc_model, 
               dc.license_plate as dc_plate, dc.year as dc_year, dc.color as dc_color
        FROM cars c
        LEFT JOIN driver_cars dc ON c.driver_id = dc.driver_id
        WHERE c.driver_id IS NOT NULL
        ORDER BY c.driver_id;
    """)
    
    result = cursor.fetchall()
    
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    for row in result:
        is_synced = (row['car_brand'] == row['dc_brand'] and 
                     row['car_model'] == row['dc_model'] and 
                     row['car_plate'] == row['dc_plate'] and 
                     row['car_year'] == row['dc_year'] and 
                     row['car_color'] == row['dc_color'])
        
        status = "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ" if is_synced else "‚ùå –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
        print(f"–í–æ–¥–∏—Ç–µ–ª—å ID: {row['driver_id']}, –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {row['car_brand']} {row['car_model']} ({row['car_plate']}) - {status}")
    
    # –ò—Ç–æ–≥–∏
    synced_count = sum(1 for r in result if (r['car_brand'] == r['dc_brand'] and 
                                             r['car_model'] == r['dc_model'] and 
                                             r['car_plate'] == r['dc_plate'] and 
                                             r['car_year'] == r['dc_year'] and 
                                             r['car_color'] == r['dc_color']))
    total_count = len(result)
    print(f"\n–ò—Ç–æ–≥–æ: {synced_count} –∏–∑ {total_count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–º–µ—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

def fix_driver_data_sync(cursor):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ drivers –∏ driver_users"""
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã drivers
    cursor.execute("""
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_name = 'drivers' 
        ORDER BY ordinal_position;
    """)
    
    drivers_columns = cursor.fetchall()
    print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã drivers:")
    for col in drivers_columns:
        print(f"  {col['column_name']} ({col['data_type']})")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö
    cursor.execute("""
        SELECT d.id, d.full_name, d.phone, 
               du.id as du_id, du.phone as du_phone, du.first_name as du_first_name, 
               du.last_name as du_last_name, du.driver_id
        FROM drivers d
        LEFT JOIN driver_users du ON d.id = du.driver_id
        ORDER BY d.id;
    """)
    
    drivers = cursor.fetchall()
    
    if not drivers:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö")
        return
    
    missing_in_driver_users = []
    mismatched_data = []
    
    for driver in drivers:
        if driver['du_id'] is None:
            missing_in_driver_users.append(driver)
        elif driver['phone'] != driver['du_phone']:
            mismatched_data.append(driver)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    for driver in missing_in_driver_users:
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            names = driver['full_name'].split() if driver['full_name'] else ["", ""]
            first_name = names[0] if len(names) > 0 else ""
            last_name = names[1] if len(names) > 1 else ""
            default_password = "pbkdf2:sha256:150000$" + "defaultpassword"
            
            cursor.execute("""
                INSERT INTO driver_users (driver_id, phone, password, first_name, last_name)
                VALUES (%s, %s, %s, %s, %s)
                RETURNING id;
            """, (
                driver['id'], driver['phone'], default_password, first_name, last_name
            ))
            
            new_id = cursor.fetchone()[0]
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ driver_users –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è ID: {driver['id']} (–Ω–æ–≤—ã–π ID: {new_id})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {driver['id']}: {e}")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö
    for driver in mismatched_data:
        try:
            cursor.execute("""
                UPDATE driver_users
                SET phone = %s
                WHERE id = %s;
            """, (driver['phone'], driver['du_id']))
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –≤ driver_users –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è ID: {driver['id']} (–∑–∞–ø–∏—Å—å ID: {driver['du_id']})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {driver['id']}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    cursor.execute("""
        SELECT d.id, d.full_name, d.phone, 
               du.id as du_id, du.phone as du_phone, du.first_name as du_first_name, 
               du.last_name as du_last_name
        FROM drivers d
        LEFT JOIN driver_users du ON d.id = du.driver_id
        ORDER BY d.id;
    """)
    
    final_drivers = cursor.fetchall()
    
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    for driver in final_drivers:
        is_phone_synced = driver['phone'] == driver['du_phone']
        is_synced = is_phone_synced and driver['du_id'] is not None
        status = "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ" if is_synced else "‚ùå –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
        
        print(f"ID: {driver['id']}, –ò–º—è: {driver['full_name']}, –¢–µ–ª–µ—Ñ–æ–Ω: {driver['phone']} / {driver['du_phone']} - {status}")
    
    # –ò—Ç–æ–≥–∏
    synced_count = sum(1 for d in final_drivers if 
                      d['phone'] == d['du_phone'] and 
                      d['du_id'] is not None)
    
    total_count = len(final_drivers)
    print(f"\n–ò—Ç–æ–≥–æ: {synced_count} –∏–∑ {total_count} –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–º–µ—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

def fix_driver_deletion(cursor, driver_id):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –≤–æ–¥–∏—Ç–µ–ª—è"""
    print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è ID={driver_id}...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
    cursor.execute("SELECT id, full_name FROM drivers WHERE id = %s", (driver_id,))
    driver = cursor.fetchone()
    if not driver:
        print(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å —Å ID={driver_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤–æ–¥–∏—Ç–µ–ª—è: {driver['full_name']} (ID: {driver['id']})")
    
    # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–µ–π
    relations = [
        {"table": "orders", "column": "driver_id", "action": "update_null"},
        {"table": "balance_transactions", "column": "driver_id", "action": "update_null"},
        {"table": "driver_users", "column": "driver_id", "action": "update_null"},
        {"table": "cars", "column": "driver_id", "action": "delete"},
        {"table": "messages", "column": "sender_id", "action": "update_null"},
        {"table": "messages", "column": "recipient_id", "action": "update_null"},
        {"table": "driver_cars", "column": "driver_id", "action": "delete"},
    ]
    
    total_fixed = 0
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    for relation in relations:
        table = relation["table"]
        column = relation["column"]
        action = relation["action"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        query = f"SELECT COUNT(*) as count FROM {table} WHERE {column} = %s"
        cursor.execute(query, (driver_id,))
        count = cursor.fetchone()["count"]
        
        if count > 0:
            if action == "update_null":
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ NULL –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
                try:
                    update_query = f"UPDATE {table} SET {column} = NULL WHERE {column} = %s"
                    cursor.execute(update_query, (driver_id,))
                    print(f"‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ {table} –æ–±–Ω–æ–≤–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω NULL)")
                    total_fixed += count
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –≤ {table}: {e}")
            elif action == "delete":
                # –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                try:
                    delete_query = f"DELETE FROM {table} WHERE {column} = %s"
                    cursor.execute(delete_query, (driver_id,))
                    print(f"‚úÖ –ò–∑ —Ç–∞–±–ª–∏—Ü—ã {table} —É–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π")
                    total_fixed += count
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∏–∑ {table}: {e}")
    
    print(f"\n–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–≤—è–∑–µ–π: {total_fixed}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
    try:
        cursor.execute("BEGIN")
        cursor.execute("DELETE FROM drivers WHERE id = %s", (driver_id,))
        cursor.execute("COMMIT")
        print(f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        return True
    except Exception as e:
        cursor.execute("ROLLBACK")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    print("üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    conn, cursor = connect_to_db()
    
    try:
        if len(sys.argv) > 1 and sys.argv[1] == "delete_driver" and len(sys.argv) > 2:
            # –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
            driver_id = int(sys.argv[2])
            fix_driver_deletion(cursor, driver_id)
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            fix_tariff_sync(cursor)
            fix_car_data_sync(cursor)
            fix_driver_data_sync(cursor)
            
            print("\n‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
    finally:
        close_connection(conn, cursor)

if __name__ == "__main__":
    main() 