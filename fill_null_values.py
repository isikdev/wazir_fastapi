#!/usr/bin/env python
# -*- coding: utf-8 -*-
import psycopg2
import psycopg2.extras
import random
import string
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'dbname': 'wazir',
    'user': 'postgres',
    'password': '123',
    'host': 'localhost',
    'port': '5432'
}

class NullValueFixer:
    def __init__(self, config):
        self.config = config
        self.conn = None
        self.cursor = None

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
        try:
            self.conn = psycopg2.connect(**self.config)
            self.conn.autocommit = True
            self.cursor = self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {} –Ω–∞ {}:{}".format(
                self.config['dbname'], self.config['host'], self.config['port']))
            return True
        except psycopg2.Error as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {}".format(e))
            return False

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()
        print("üëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

    def generate_random_phone(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        return "+7" + "".join(random.choices(string.digits, k=10))

    def generate_random_name(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
        first_names = ["–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–ò–≤–∞–Ω", "–î–º–∏—Ç—Ä–∏–π", "–°–µ—Ä–≥–µ–π", "–ú–∏—Ö–∞–∏–ª", "–ê–Ω–¥—Ä–µ–π", "–ù–∏–∫–æ–ª–∞–π", "–ü–µ—Ç—Ä", "–í–∏–∫—Ç–æ—Ä", "–ú–∞–∫—Å–∏–º"]
        last_names = ["–ò–≤–∞–Ω–æ–≤", "–°–º–∏—Ä–Ω–æ–≤", "–ö—É–∑–Ω–µ—Ü–æ–≤", "–ü–æ–ø–æ–≤", "–í–∞—Å–∏–ª—å–µ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–æ–∫–æ–ª–æ–≤", "–ú–∏—Ö–∞–π–ª–æ–≤", "–ù–æ–≤–∏–∫–æ–≤", "–§–µ–¥–æ—Ä–æ–≤"]
        return f"{random.choice(first_names)} {random.choice(last_names)}"

    def generate_random_car_brand(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        brands = ["Toyota", "Honda", "Ford", "Volkswagen", "BMW", "Mercedes", "Audi", "Hyundai", "Kia", "Nissan"]
        return random.choice(brands)

    def generate_random_car_model(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        models = ["Camry", "Civic", "Focus", "Golf", "X5", "E-Class", "A4", "Sonata", "Sportage", "Altima"]
        return random.choice(models)

    def generate_random_license_plate(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        letters = "–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•"
        region_codes = ["77", "78", "50", "47", "99", "197", "177", "97", "777", "799"]
        plate = random.choice(letters) + random.choice(string.digits) + random.choice(string.digits) + random.choice(string.digits) + random.choice(letters) + random.choice(letters)
        region = random.choice(region_codes)
        return f"{plate}{region}"

    def generate_random_date(self, start_year=2010, end_year=2023):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã"""
        year = random.randint(start_year, end_year)
        month = random.randint(1, 12)
        day = random.randint(1, 28)
        return datetime.date(year, month, day)

    def fix_null_values_in_drivers(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ NULL-–∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ drivers"""
        print("\nüîç –ü–æ–∏—Å–∫ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ NULL-–∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ drivers...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã drivers
        self.cursor.execute("""
            SELECT column_name, data_type
            FROM information_schema.columns
            WHERE table_name = 'drivers'
            ORDER BY ordinal_position;
        """)
        
        columns = self.cursor.fetchall()
        column_names = [col['column_name'] for col in columns]
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å NULL-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        query_parts = []
        for col in column_names:
            query_parts.append(f"{col} IS NULL")
        
        null_check_query = " OR ".join(query_parts)
        
        self.cursor.execute(f"""
            SELECT id, {', '.join(column_names)}
            FROM drivers
            WHERE {null_check_query};
        """)
        
        drivers_with_nulls = self.cursor.fetchall()
        fixed_count = 0
        
        if not drivers_with_nulls:
            print("‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ drivers –Ω–µ—Ç NULL-–∑–Ω–∞—á–µ–Ω–∏–π")
            return fixed_count
        
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(drivers_with_nulls)} –∑–∞–ø–∏—Å–µ–π —Å NULL-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ drivers")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å —Å NULL-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        for driver in drivers_with_nulls:
            updates = {}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
            for col in column_names:
                if driver[col] is None:
                    if col == 'full_name':
                        updates[col] = self.generate_random_name()
                    elif col == 'phone':
                        updates[col] = self.generate_random_phone()
                    elif col == 'status':
                        updates[col] = random.choice(['active', 'inactive', 'pending'])
                    elif col == 'balance':
                        updates[col] = round(random.uniform(0, 10000), 2)
                    elif col == 'date_registered':
                        updates[col] = self.generate_random_date()
                    elif col == 'is_verified':
                        updates[col] = random.choice([True, False])
                    elif col == 'rating':
                        updates[col] = round(random.uniform(3.0, 5.0), 1)
                    elif col == 'first_name':
                        first_name = self.generate_random_name().split()[0]
                        updates[col] = first_name
                    elif col == 'last_name':
                        last_name = self.generate_random_name().split()[1]
                        updates[col] = last_name
            
            if not updates:
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            set_clause = ", ".join([f"{key} = %s" for key in updates.keys()])
            values = list(updates.values())
            
            try:
                self.cursor.execute(f"""
                    UPDATE drivers
                    SET {set_clause}
                    WHERE id = %s;
                """, values + [driver['id']])
                
                fixed_count += 1
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å id={driver['id']}: {', '.join([f'{k}={v}' for k, v in updates.items()])}")
            except psycopg2.Error as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å id={driver['id']}: {e}")
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {fixed_count} –∏–∑ {len(drivers_with_nulls)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ drivers")
        return fixed_count

    def fix_null_values_in_driver_users(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ NULL-–∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ driver_users"""
        print("\nüîç –ü–æ–∏—Å–∫ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ NULL-–∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ driver_users...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã driver_users
        self.cursor.execute("""
            SELECT column_name, data_type
            FROM information_schema.columns
            WHERE table_name = 'driver_users'
            ORDER BY ordinal_position;
        """)
        
        columns = self.cursor.fetchall()
        column_names = [col['column_name'] for col in columns]
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å NULL-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        query_parts = []
        for col in column_names:
            query_parts.append(f"{col} IS NULL")
        
        null_check_query = " OR ".join(query_parts)
        
        self.cursor.execute(f"""
            SELECT id, {', '.join(column_names)}
            FROM driver_users
            WHERE {null_check_query};
        """)
        
        users_with_nulls = self.cursor.fetchall()
        fixed_count = 0
        
        if not users_with_nulls:
            print("‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ driver_users –Ω–µ—Ç NULL-–∑–Ω–∞—á–µ–Ω–∏–π")
            return fixed_count
        
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(users_with_nulls)} –∑–∞–ø–∏—Å–µ–π —Å NULL-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ driver_users")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å —Å NULL-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        for user in users_with_nulls:
            updates = {}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
            for col in column_names:
                if user[col] is None:
                    if col == 'phone':
                        updates[col] = self.generate_random_phone()
                    elif col == 'password':
                        updates[col] = 'pbkdf2:sha256:150000$' + ''.join(random.choices(string.ascii_letters + string.digits, k=20))
                    elif col == 'first_name':
                        updates[col] = self.generate_random_name().split()[0]
                    elif col == 'last_name':
                        updates[col] = self.generate_random_name().split()[1]
                    elif col == 'email':
                        updates[col] = f"user{random.randint(1000, 9999)}@example.com"
                    elif col == 'is_verified':
                        updates[col] = random.choice([True, False])
            
            if not updates:
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            set_clause = ", ".join([f"{key} = %s" for key in updates.keys()])
            values = list(updates.values())
            
            try:
                self.cursor.execute(f"""
                    UPDATE driver_users
                    SET {set_clause}
                    WHERE id = %s;
                """, values + [user['id']])
                
                fixed_count += 1
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å id={user['id']}: {', '.join([f'{k}={v}' for k, v in updates.items()])}")
            except psycopg2.Error as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å id={user['id']}: {e}")
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {fixed_count} –∏–∑ {len(users_with_nulls)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ driver_users")
        return fixed_count

    def fix_null_values_in_cars(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ NULL-–∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö cars –∏ driver_cars"""
        print("\nüîç –ü–æ–∏—Å–∫ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ NULL-–∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö cars –∏ driver_cars...")
        
        tables = ['cars', 'driver_cars']
        total_fixed = 0
        
        for table_name in tables:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
            self.cursor.execute(f"""
                SELECT column_name, data_type
                FROM information_schema.columns
                WHERE table_name = '{table_name}'
                ORDER BY ordinal_position;
            """)
            
            columns = self.cursor.fetchall()
            column_names = [col['column_name'] for col in columns]
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å NULL-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            query_parts = []
            for col in column_names:
                query_parts.append(f"{col} IS NULL")
            
            null_check_query = " OR ".join(query_parts)
            
            self.cursor.execute(f"""
                SELECT id, {', '.join(column_names)}
                FROM {table_name}
                WHERE {null_check_query};
            """)
            
            cars_with_nulls = self.cursor.fetchall()
            fixed_count = 0
            
            if not cars_with_nulls:
                print(f"‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ {table_name} –Ω–µ—Ç NULL-–∑–Ω–∞—á–µ–Ω–∏–π")
                continue
            
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(cars_with_nulls)} –∑–∞–ø–∏—Å–µ–π —Å NULL-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å —Å NULL-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            for car in cars_with_nulls:
                updates = {}
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
                for col in column_names:
                    if car[col] is None:
                        if col == 'brand':
                            updates[col] = self.generate_random_car_brand()
                        elif col == 'model':
                            updates[col] = self.generate_random_car_model()
                        elif col == 'year':
                            updates[col] = random.randint(2010, 2023)
                        elif col == 'color':
                            updates[col] = random.choice(['–ë–µ–ª—ã–π', '–ß–µ—Ä–Ω—ã–π', '–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π', '–ö—Ä–∞—Å–Ω—ã–π', '–°–∏–Ω–∏–π', '–ó–µ–ª–µ–Ω—ã–π'])
                        elif col == 'license_plate':
                            updates[col] = self.generate_random_license_plate()
                        elif col == 'vin':
                            updates[col] = ''.join(random.choices(string.ascii_uppercase + string.digits, k=17))
                        elif col == 'registration_date':
                            updates[col] = self.generate_random_date()
                        elif col == 'status':
                            updates[col] = random.choice(['active', 'inactive', 'pending'])
                
                if not updates:
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                set_clause = ", ".join([f"{key} = %s" for key in updates.keys()])
                values = list(updates.values())
                
                try:
                    self.cursor.execute(f"""
                        UPDATE {table_name}
                        SET {set_clause}
                        WHERE id = %s;
                    """, values + [car['id']])
                    
                    fixed_count += 1
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å id={car['id']} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {', '.join([f'{k}={v}' for k, v in updates.items()])}")
                except psycopg2.Error as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å id={car['id']} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {e}")
            
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {fixed_count} –∏–∑ {len(cars_with_nulls)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
            total_fixed += fixed_count
        
        return total_fixed

    def run_all_fixes(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é NULL-–∑–Ω–∞—á–µ–Ω–∏–π"""
        print("üîß –ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é NULL-–∑–Ω–∞—á–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        if not self.connect():
            return
        
        try:
            total_fixed = 0
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º NULL-–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
            total_fixed += self.fix_null_values_in_drivers()
            total_fixed += self.fix_null_values_in_driver_users()
            total_fixed += self.fix_null_values_in_cars()
            
            print(f"\n‚úÖ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {total_fixed} –∑–∞–ø–∏—Å–µ–π —Å NULL-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        finally:
            self.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
    fixer = NullValueFixer(DB_CONFIG)
    fixer.run_all_fixes()

if __name__ == "__main__":
    main() 