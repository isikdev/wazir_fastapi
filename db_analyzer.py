#!/usr/bin/env python
import psycopg2
import psycopg2.extras
import json
from tabulate import tabulate

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
from db_params import db_params

def connect_to_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(**db_params)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {db_params['dbname']} –Ω–∞ {db_params['host']}:{db_params['port']}")
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_tables(conn):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """)
            tables = [row[0] for row in cur.fetchall()]
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü")
            return tables
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
        return []

def get_table_size(conn, table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT 
                    pg_size_pretty(pg_total_relation_size(%s)) as total_size,
                    pg_size_pretty(pg_relation_size(%s)) as table_size,
                    pg_size_pretty(pg_total_relation_size(%s) - pg_relation_size(%s)) as index_size,
                    (SELECT reltuples FROM pg_class WHERE relname = %s) as row_estimate
            """, (table_name, table_name, table_name, table_name, table_name))
            
            return cur.fetchone()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return None

def get_table_columns(conn, table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–æ–ª–±—Ü–∞—Ö —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
            cur.execute("""
                SELECT 
                    column_name, 
                    data_type, 
                    character_maximum_length,
                    is_nullable,
                    column_default
                FROM information_schema.columns 
                WHERE table_schema = 'public' 
                  AND table_name = %s
                ORDER BY ordinal_position
            """, (table_name,))
            
            columns = []
            for row in cur.fetchall():
                column_info = dict(row)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
                cur.execute("""
                    SELECT 
                        tc.constraint_name,
                        tc.constraint_type
                    FROM information_schema.table_constraints AS tc
                    JOIN information_schema.key_column_usage AS kcu
                    ON tc.constraint_name = kcu.constraint_name
                    WHERE tc.table_schema = 'public'
                      AND tc.table_name = %s
                      AND kcu.column_name = %s
                      AND tc.constraint_type = 'PRIMARY KEY'
                """, (table_name, column_info['column_name']))
                
                is_primary = cur.fetchone() is not None
                column_info['is_primary'] = is_primary
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞
                cur.execute("""
                    SELECT
                        ccu.table_name AS referenced_table,
                        ccu.column_name AS referenced_column
                    FROM information_schema.table_constraints AS tc
                    JOIN information_schema.key_column_usage AS kcu
                    ON tc.constraint_name = kcu.constraint_name
                    JOIN information_schema.constraint_column_usage AS ccu
                    ON ccu.constraint_name = tc.constraint_name
                    WHERE tc.table_schema = 'public'
                      AND tc.table_name = %s
                      AND kcu.column_name = %s
                      AND tc.constraint_type = 'FOREIGN KEY'
                """, (table_name, column_info['column_name']))
                
                fk_info = cur.fetchone()
                if fk_info:
                    column_info['foreign_key'] = {
                        'referenced_table': fk_info['referenced_table'],
                        'referenced_column': fk_info['referenced_column']
                    }
                
                columns.append(column_info)
            
            return columns
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return []

def get_indexes(conn, table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ö —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
            cur.execute("""
                SELECT
                    i.relname AS index_name,
                    array_to_string(array_agg(a.attname), ', ') AS column_names,
                    ix.indisunique AS is_unique,
                    ix.indisprimary AS is_primary
                FROM
                    pg_class t,
                    pg_class i,
                    pg_index ix,
                    pg_attribute a
                WHERE
                    t.oid = ix.indrelid
                    AND i.oid = ix.indexrelid
                    AND a.attrelid = t.oid
                    AND a.attnum = ANY(ix.indkey)
                    AND t.relkind = 'r'
                    AND t.relname = %s
                GROUP BY
                    i.relname,
                    ix.indisunique,
                    ix.indisprimary
                ORDER BY
                    i.relname;
            """, (table_name,))
            
            return [dict(row) for row in cur.fetchall()]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return []

def get_table_constraints(conn, table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
            cur.execute("""
                SELECT
                    tc.constraint_name,
                    tc.constraint_type,
                    kcu.column_name,
                    ccu.table_name AS referenced_table,
                    ccu.column_name AS referenced_column
                FROM
                    information_schema.table_constraints AS tc
                    JOIN information_schema.key_column_usage AS kcu
                      ON tc.constraint_name = kcu.constraint_name
                    LEFT JOIN information_schema.constraint_column_usage AS ccu
                      ON ccu.constraint_name = tc.constraint_name
                WHERE
                    tc.table_schema = 'public'
                    AND tc.table_name = %s
                ORDER BY
                    tc.constraint_name,
                    kcu.column_name
            """, (table_name,))
            
            return [dict(row) for row in cur.fetchall()]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return []

def get_sample_data(conn, table_name, limit=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
            cur.execute(f"SELECT * FROM {table_name} LIMIT %s", (limit,))
            return [dict(row) for row in cur.fetchall()]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return []

def analyze_database():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = connect_to_db()
    if not conn:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    
    try:
        tables = get_tables(conn)
        
        database_structure = {
            "database_name": db_params['dbname'],
            "tables": {}
        }
        
        print("\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n")
        
        for table_name in tables:
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
            
            # –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
            size_info = get_table_size(conn, table_name)
            if size_info:
                total_size, table_size, index_size, row_estimate = size_info
                print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size}, –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {table_size}, –†–∞–∑–º–µ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤: {index_size}, –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {int(row_estimate) if row_estimate else 0}")
            
            columns = get_table_columns(conn, table_name)
            indexes = get_indexes(conn, table_name)
            constraints = get_table_constraints(conn, table_name)
            sample_data = get_sample_data(conn, table_name)
            
            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–æ–ª–±—Ü–∞—Ö –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
            columns_data = []
            for col in columns:
                data_type = col['data_type']
                if col['character_maximum_length']:
                    data_type += f"({col['character_maximum_length']})"
                
                fk_info = ''
                if 'foreign_key' in col:
                    fk_info = f" -> {col['foreign_key']['referenced_table']}.{col['foreign_key']['referenced_column']}"
                
                pk_info = 'üîë PK' if col['is_primary'] else ''
                nullable = 'NULL' if col['is_nullable'] == 'YES' else 'NOT NULL'
                
                columns_data.append([
                    col['column_name'],
                    data_type,
                    nullable,
                    col['column_default'] or '',
                    pk_info,
                    fk_info
                ])
            
            print("\n–°—Ç–æ–ª–±—Ü—ã:")
            print(tabulate(
                columns_data, 
                headers=["–ò–º—è", "–¢–∏–ø", "Null", "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", "PK", "FK"]
            ))
            
            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ö
            if indexes:
                print("\n–ò–Ω–¥–µ–∫—Å—ã:")
                indexes_data = []
                for idx in indexes:
                    indexes_data.append([
                        idx['index_name'],
                        idx['column_names'],
                        '‚úì' if idx['is_unique'] else '',
                        '‚úì' if idx['is_primary'] else ''
                    ])
                
                print(tabulate(
                    indexes_data,
                    headers=["–ò–º—è –∏–Ω–¥–µ–∫—Å–∞", "–°—Ç–æ–ª–±—Ü—ã", "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π", "–ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á"]
                ))
            
            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö
            if constraints:
                print("\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:")
                constraints_data = []
                for constraint in constraints:
                    ref_info = ''
                    if constraint['constraint_type'] == 'FOREIGN KEY':
                        ref_info = f"{constraint['referenced_table']}.{constraint['referenced_column']}"
                    
                    constraints_data.append([
                        constraint['constraint_name'],
                        constraint['constraint_type'],
                        constraint['column_name'],
                        ref_info
                    ])
                
                print(tabulate(
                    constraints_data,
                    headers=["–ò–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "–¢–∏–ø", "–°—Ç–æ–ª–±–µ—Ü", "–°—Å—ã–ª–∫–∞"]
                ))
            
            # –í—ã–≤–æ–¥ –æ–±—Ä–∞–∑—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
            if sample_data:
                print("\n–û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö (–º–∞–∫—Å–∏–º—É–º 5 —Å—Ç—Ä–æ–∫):")
                print(tabulate(sample_data, headers="keys"))
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ
            database_structure["tables"][table_name] = {
                "columns": columns,
                "indexes": indexes,
                "constraints": constraints,
                "sample_data": sample_data,
                "size_info": size_info
            }
            
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π
        tables_without_pk = []
        for table_name, table_info in database_structure["tables"].items():
            has_pk = False
            for col in table_info["columns"]:
                if col["is_primary"]:
                    has_pk = True
                    break
            
            if not has_pk:
                tables_without_pk.append(table_name)
        
        if tables_without_pk:
            print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –±–µ–∑ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: {', '.join(tables_without_pk)}")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        fk_without_indexes = []
        for table_name, table_info in database_structure["tables"].items():
            for col in table_info["columns"]:
                if 'foreign_key' in col:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω–¥–µ–∫—Å –¥–ª—è —ç—Ç–æ–≥–æ FK
                    has_index = False
                    for idx in table_info["indexes"]:
                        if col["column_name"] in idx["column_names"]:
                            has_index = True
                            break
                    
                    if not has_index:
                        fk_without_indexes.append(f"{table_name}.{col['column_name']}")
        
        if fk_without_indexes:
            print(f"\n‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤: {', '.join(fk_without_indexes)}")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ JOIN")
            for fk in fk_without_indexes:
                table, column = fk.split('.')
                print(f"   CREATE INDEX idx_{table}_{column} ON {table}({column});")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
        large_tables_without_indexes = []
        for table_name, table_info in database_structure["tables"].items():
            if table_info.get("size_info") and float(table_info["size_info"][3] or 0) > 10000:  # –µ—Å–ª–∏ –±–æ–ª—å—à–µ 10–∫ —Å—Ç—Ä–æ–∫
                if len(table_info["indexes"]) < 2:  # –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 2 –∏–Ω–¥–µ–∫—Å–æ–≤
                    large_tables_without_indexes.append(table_name)
        
        if large_tables_without_indexes:
            print(f"\n‚ö†Ô∏è –ö—Ä—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–Ω–¥–µ–∫—Å–æ–≤: {', '.join(large_tables_without_indexes)}")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ —ç—Ç–∏–º —Ç–∞–±–ª–∏—Ü–∞–º –∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON —Ñ–∞–π–ª
        with open('database_structure.json', 'w', encoding='utf-8') as f:
            json.dump(database_structure, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª database_structure.json")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()
        print("\nüëã –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    analyze_database() 