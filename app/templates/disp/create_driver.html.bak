{% extends "base.html" %}

{% block title %}Создание водителя - taxi.wazir.kg{% endblock %}

{% block head %}
{{ super() }}
<link rel="icon" type="image/png"
    href="{{ url_for('static', path='/assets/img/ico/favicon.png') }}">
<!-- Подключаем jQuery как первый скрипт -->
<script
    src="{{ url_for('static', path='/assets/js/jquery-3.7.1.min.js') }}"></script>
<!-- Подключаем Flatpickr локально -->
<link rel="stylesheet"
    href="{{ url_for('static', path='/assets/css/flatpickr.min.css') }}">
<link rel="stylesheet"
    href="{{ url_for('static', path='/assets/css/flatpickr.dark.css') }}">
<script src="{{ url_for('static', path='/assets/js/flatpickr.js') }}"></script>
<script
    src="{{ url_for('static', path='/assets/js/flatpickr.ru.js') }}"></script>
<!-- Подключаем InputMask локально -->
<script
    src="{{ url_for('static', path='/assets/js/jquery.inputmask.min.js') }}"></script>
<!-- Подключаем FontAwesome локально -->
<link rel="stylesheet"
    href="{{ url_for('static', path='/assets/css/all.min.css') }}">

<script>
// Глобальные переменные для работы с данными форм
let formData = {
    driver: {},
    car: {},
    photos: {}
};

// Переменные для отслеживания заполнения форм
let driverFormCompleted = false;
let carFormCompleted = false;
let photosFormCompleted = false;

// Переменная для отслеживания загрузки данных
let dataLoaded = false;

// Переменная для хранения данных из JSON
let driverData = null;

// Функция для отображения ошибок
function showError(message) {
    $('#error-message').html(message).show();
    setTimeout(function() {
        $('#error-message').fadeOut();
    }, 5000);
}

// Функция для отображения сообщений об успехе
function showSuccess(message) {
    const successEl = $('#success-message');
    if (successEl.length === 0) {
        $('body').append('<div id="success-message" class="alert alert-success" style="display: none; color: white; background-color: #27ae60; padding: 10px; margin-bottom: 20px; border-radius: 5px; position: fixed; top: 20px; right: 20px; z-index: 9999;"></div>');
    }
    $('#success-message').text(message).show();
    setTimeout(function() {
        $('#success-message').fadeOut();
    }, 3000);
}

// Функция для проверки соответствия данных требованиям API
function validateApiData() {
    console.log('Запуск validateApiData...');
    
    console.log('formData:', formData);
    
    // Проверяем наличие обязательных полей для модели Driver
    const requiredDriverFields = [
        'full_name', 'birthdate', 'callsign', 'city', 'driver_license_number', 'driver_license_issue_date', 'unique_id'
    ];
    
    const missingDriverFields = [];
    
    // Подготавливаем данные водителя для проверки
    let driverFormData = {...formData.driver};
    
    // Обработка даты рождения
    if (!driverFormData.birthdate && driverFormData.birth_date) {
        const dateValue = driverFormData.birth_date;
        if (dateValue) {
            const parts = dateValue.split('.');
            if (parts.length === 3) {
                driverFormData.birthdate = `${parts[2]}-${parts[1]}-${parts[0]}`;
            } else {
                driverFormData.birthdate = dateValue;
            }
        }
    }
    
    // Маппинг полей из формы в поля модели
    if (driverFormData.personal_number && !driverFormData.unique_id) {
        driverFormData.unique_id = driverFormData.personal_number;
    }
    
    if (driverFormData.driver_license && !driverFormData.driver_license_number) {
        driverFormData.driver_license_number = driverFormData.driver_license;
    }
    
    if (driverFormData.license_issue_date && !driverFormData.driver_license_issue_date) {
        driverFormData.driver_license_issue_date = driverFormData.license_issue_date;
    }
    
    // Особая обработка для поля city
    if (!driverFormData.city) {
        const cityValue = $('#city').val();
        if (cityValue && cityValue !== 'Выберите город') {
            driverFormData.city = cityValue;
            console.log('Город из выпадающего списка:', cityValue);
        } else {
            // Если город не выбран, устанавливаем Бишкек по умолчанию
            driverFormData.city = 'Бишкек';
            console.log('Установлен город по умолчанию: Бишкек');
        }
    }
    
    // Проверяем наличие всех обязательных полей
    requiredDriverFields.forEach(field => {
        if (!driverFormData[field]) {
            // Особые случаи для полей с дефолтными значениями
            if (field === 'unique_id' && driverFormData.personal_number) {
                driverFormData.unique_id = driverFormData.personal_number;
            } else {
                missingDriverFields.push(field);
            }
        }
    });
    
    // Обязательные поля для модели Car
    const requiredCarFields = [
        'brand', 'model', 'year', 'transmission', 'license_plate', 'vin', 'service_type'
    ];
    
    const missingCarFields = [];
    
    // Подготавливаем данные автомобиля для проверки
    let carFormData = {...formData.car};
    
    // Маппинг полей из формы в поля модели
    if (carFormData.car_make && !carFormData.brand) {
        carFormData.brand = carFormData.car_make;
    }
    
    if (carFormData.car_model && !carFormData.model) {
        carFormData.model = carFormData.car_model;
    }
    
    if (carFormData.car_year && !carFormData.year) {
        carFormData.year = carFormData.car_year;
    }
    
    if (!carFormData.service_type) {
        if (carFormData.service) {
            carFormData.service_type = carFormData.service;
        } else {
            carFormData.service_type = 'Такси'; // Значение по умолчанию
        }
    }
    
    // Проверяем наличие всех обязательных полей
    requiredCarFields.forEach(field => {
        if (!carFormData[field]) {
            // Особые случаи для полей с дефолтными значениями
            if (field === 'service_type') {
                carFormData.service_type = 'Такси';
            } else {
                missingCarFields.push(field);
            }
        }
    });
    
    // Если есть отсутствующие поля, показываем сообщение об ошибке
    if (missingDriverFields.length > 0 || missingCarFields.length > 0) {
        let errorMessage = 'Не заполнены обязательные поля:<br>';
        
        if (missingDriverFields.length > 0) {
            errorMessage += '<b>Водитель:</b> ' + missingDriverFields.join(', ') + '<br>';
        }
        
        if (missingCarFields.length > 0) {
            errorMessage += '<b>Автомобиль:</b> ' + missingCarFields.join(', ');
        }
        
        showError(errorMessage);
        console.error('Отсутствуют обязательные поля:', {
            driver: missingDriverFields,
            car: missingCarFields
        });
        
        // Вывод детальной отладочной информации
        console.log('Текущие данные формы:', {
            driverFormData: driverFormData,
            carFormData: carFormData,
            missingDriverFields: missingDriverFields,
            missingCarFields: missingCarFields
        });
        
        // Обновляем данные формы с дополнительными полями
        formData.driver = driverFormData;
        formData.car = carFormData;
        
        return false;
    }
    
    // Обновляем данные формы с дополнительными полями
    formData.driver = driverFormData;
    formData.car = carFormData;
    
    console.log('Данные соответствуют требованиям API:', {
        driver: driverFormData,
        car: carFormData
    });
    
    return true;
}

// Функция для получения данных из формы
function getFormData(formId) {
    const data = {};
    $(`#${formId} input, #${formId} select`).each(function() {
        const fieldId = $(this).attr('id');
        const fieldName = $(this).attr('name');
        
        if ($(this).attr('type') === 'checkbox') {
            data[fieldName] = $(this).prop('checked');
        } else if ($(this).attr('type') === 'file') {
            // Файлы обрабатываются отдельно при отправке
            if ($(this)[0].files && $(this)[0].files[0]) {
                data[fieldName] = true; // Помечаем, что файл выбран
            }
        } else if (fieldId === 'phone') {
            // Для телефона добавляем код страны +996
            data[fieldName] = '+996 ' + $(this).val();
        } else if (fieldId === 'birth_date') {
            // Для даты рождения преобразуем формат (DD.MM.YYYY -> YYYY-MM-DD)
            // ВАЖНО: В модели Driver используется поле birthdate (без подчеркивания)
            const dateValue = $(this).val();
            if (dateValue) {
                const parts = dateValue.split('.');
                if (parts.length === 3) {
                    const isoDate = `${parts[2]}-${parts[1]}-${parts[0]}`;
                    // Используем ТОЛЬКО поле birthdate для модели Driver
                    // НЕ используем birth_date, так как это вызывает ошибку
                    data.birthdate = isoDate;
                } else {
                    data.birthdate = dateValue;
                }
            }
        } else if (fieldId === 'license_issue_date' || fieldId === 'license_expiry_date') {
            // Преобразуем даты из DD.MM.YYYY в YYYY-MM-DD
            const dateValue = $(this).val();
            if (dateValue) {
                const parts = dateValue.split('.');
                if (parts.length === 3) {
                    data[fieldName] = `${parts[2]}-${parts[1]}-${parts[0]}`;
                } else {
                    data[fieldName] = dateValue;
                }
            }
        } else {
            data[fieldName] = $(this).val();
        }
    });
    console.log('Собранные данные формы:', data);
    return data;
}

// Улучшенная функция для валидации формы
function validateForm(formId) {
    console.log(`Валидируем форму: ${formId}`);
    
    const $form = $(`#${formId}`);
    const errors = [];
    
    // Проверяем все обязательные поля
    $form.find('[required]').each(function() {
        const $field = $(this);
        const fieldId = $field.attr('id');
        const fieldType = $field.attr('type');
        
        // Пропускаем проверку всех полей загрузки файлов - делаем их необязательными для отладки
        if (fieldType === 'file') {
            return true; // пропускаем проверку файлов
        }
        
        let isValid = true;
        
        if (fieldType === 'checkbox') {
            isValid = $field.prop('checked');
        } else {
            isValid = $field.val() !== '' && $field.val() !== null;
        }
        
        if (!isValid) {
            console.log(`Ошибка в поле: ${fieldId} `);
            errors.push({
                field: fieldId,
                message: $field.data('error') || 'Поле обязательно к заполнению'
            });
            $field.addClass('is-invalid');
        } else {
            $field.removeClass('is-invalid');
        }
    });
    
    // Проверка загрузки файлов пропущена - все файлы необязательны
    
    // Отображаем все ошибки
    const $errorContainer = $('#error-message');
    
    if (errors.length > 0) {
        const errorMessages = errors.map(err => `<div>${err.message}</div>`).join('');
        $errorContainer.html(errorMessages).show();
        setTimeout(() => {
            $errorContainer.fadeOut(1000);
        }, 5000);
    } else {
        $errorContainer.hide();
    }
    
    console.log(`Форма валидна: ${errors.length === 0}`, errors);
    
    return errors.length === 0;
}

// Функция для переключения между табами
function switchTab(tabId) {
    console.log("Переключаем на таб:", tabId);
    
    // Скрываем все формы
    $('.form-section').hide();
    
    // Показываем нужную форму
    $(`#${tabId}`).show();
    
    // Обновляем активные табы
    $('.tab-btn').removeClass('main__btn-driver');
    
    // Определяем какой таб должен быть активным
    let activeTabId;
    if (tabId === 'form-driver') {
        activeTabId = 'tab-driver';
        $('#progress-indicator').css('width', '33%');
        $('.progress-step').removeClass('active');
        $('.progress-step:eq(0)').addClass('active');
    } else if (tabId === 'form-car') {
        activeTabId = 'tab-car';
        $('#progress-indicator').css('width', '66%');
        $('.progress-step').removeClass('active');
        $('.progress-step:eq(1)').addClass('active');
    } else if (tabId === 'form-photos') {
        activeTabId = 'tab-photos';
        $('#progress-indicator').css('width', '100%');
        $('.progress-step').removeClass('active');
        $('.progress-step:eq(2)').addClass('active');
    }
    
    $(`#${activeTabId}`).addClass('main__btn-driver');
}

// Обработчики клика по табам
$('#tab-driver').click(function() {
    console.log("Клик по табу водителя");
    switchTab('form-driver');
});

$('#tab-car').click(function() {
    console.log("Клик по табу автомобиля");
    if (!$(this).prop('disabled')) {
        switchTab('form-car');
    } else {
        showError('Сначала заполните данные водителя');
    }
});

$('#tab-photos').click(function() {
    console.log("Клик по табу фотографий");
    if (!$(this).prop('disabled')) {
        switchTab('form-photos');
    } else {
        showError('Сначала заполните данные автомобиля');
    }
});

// Обработка кнопки "Продолжить" в форме водителя
$('#driver-next').click(function() {
    console.log("Клик по кнопке 'Продолжить' в форме водителя");
    if (validateForm('driver-form')) {
        driverFormCompleted = true;
        formData.driver = getFormData('driver-form');
        console.log("Данные водителя:", formData.driver);
        
        // Разблокируем второй таб
        $('#tab-car').prop('disabled', false);
        
        // Сохраняем и переходим к форме автомобиля
        saveAndSwitchTab('form-car');
    }
});

// Обработка кнопки "Назад" в форме автомобиля
$('#car-back').click(function() {
    console.log("Клик по кнопке 'Назад' в форме автомобиля");
    switchTab('form-driver');
});

// Обработка кнопки "Продолжить" в форме автомобиля
$('#car-next').click(function() {
    console.log("Клик по кнопке 'Продолжить' в форме автомобиля");
    if (validateForm('car-form')) {
        carFormCompleted = true;
        formData.car = getFormData('car-form');
        console.log("Данные автомобиля:", formData.car);
        
        // Разблокируем третий таб
        $('#tab-photos').prop('disabled', false);
        
        // Сохраняем и переходим к форме фотографий
        saveAndSwitchTab('form-photos');
    }
});

// Обработка кнопки "Назад" в форме фотографий
$('#photos-back').click(function() {
    console.log("Клик по кнопке 'Назад' в форме фотографий");
    switchTab('form-car');
});

// Обработка сохранения всех данных
$('#save-all').click(function() {
    console.log("Клик по кнопке 'Создать водителя'");
    
    // Проверяем все формы последовательно
    if (!validateForm('driver-form')) {
        // Если форма водителя не валидна, переключаемся на неё
        switchTab('form-driver');
        return;
    }
    
    if (!validateForm('car-form')) {
        // Если форма автомобиля не валидна, переключаемся на неё
        switchTab('form-car');
        return;
    }
    
    if (!validateForm('photos-form')) {
        // Если форма фотографий не валидна, остаемся на текущей
        return;
    }
    
    // Если все формы валидны, собираем данные
    photosFormCompleted = true;
    formData.driver = getFormData('driver-form');
    formData.car = getFormData('car-form');
    formData.photos = getFormData('photos-form');
    
    console.log("Данные водителя:", formData.driver);
    console.log("Данные автомобиля:", formData.car);
    console.log("Данные фотографий:", formData.photos);
    
    // Проверяем соответствие данных требованиям модели
    if (!validateApiData()) {
        return;
    }
    
    // Маппинг полей клиента на поля модели
    const driverFieldMapping = {
        'full_name': 'full_name',
        'birth_date': 'birthdate',               // в модели birthdate, в форме birth_date
        'personal_number': 'unique_id',          // в модели unique_id, в форме personal_number
        'phone': 'phone',
        'driver_license': 'driver_license_number', // в модели driver_license_number
        'license_issue_date': 'driver_license_issue_date',
        'license_expiry_date': 'license_expiry_date',
        'address': 'address',
        'callsign': 'callsign',
        'tariff': 'tariff',
        'city': 'city'
    };

    // Маппинг полей автомобиля
    const carFieldMapping = {
        'car_make': 'brand',             // в модели brand, в форме car_make
        'car_model': 'model',            // в модели model, в форме car_model
        'car_color': 'color',            // в модели color, в форме car_color
        'car_year': 'year',              // в модели year, в форме car_year
        'transmission': 'transmission',
        'boosters': 'has_booster',       // в модели has_booster (bool), в форме boosters (число)
        'child_seats': 'has_child_seat', // в модели has_child_seat (bool), в форме child_seats (число)
        'is_park_car': 'is_park_car',
        'license_plate': 'license_plate',
        'vin': 'vin',
        'body_number': 'body_number',
        'registration': 'registration',
        'has_sticker': 'has_sticker',
        'has_lightbox': 'has_lightbox',
        'service': 'service_type',       // в модели service_type, в форме service
        'category': 'category',
        'tariff': 'tariff'
    };

    // Создаем финальный объект данных с правильными именами полей
    const processedData = {
        driver: {},
        car: {}
    };

    // Обрабатываем поля водителя
    for (const key in formData.driver) {
        // Игнорируем поле birth_date, так как мы используем birthdate
        if (key === 'birth_date') {
            const dateValue = formData.driver[key];
            if (dateValue) {
                let birthdate = dateValue;
                
                // Если дата в формате DD.MM.YYYY, конвертируем в YYYY-MM-DD
                if (dateValue.includes('.')) {
                    const parts = dateValue.split('.');
                    if (parts.length === 3) {
                        birthdate = `${parts[2]}-${parts[1]}-${parts[0]}`;
                    }
                }
                
                processedData.driver.birthdate = birthdate;
            }
            continue;
        }
        
        // Проверяем, нужно ли переименовать поле согласно маппингу
        const modelField = driverFieldMapping[key] || key;
        processedData.driver[modelField] = formData.driver[key];
    }

    // Добавляем обязательное поле city, если оно не было добавлено
    if (!processedData.driver.city) {
        processedData.driver.city = $('#city').val() || 'Бишкек';
    }

    // Преобразуем personal_number в unique_id
    if (formData.driver.personal_number && !processedData.driver.unique_id) {
        processedData.driver.unique_id = formData.driver.personal_number;
    }

    // Обрабатываем поля автомобиля
    for (const key in formData.car) {
        // Проверяем, нужно ли переименовать поле согласно маппингу
        const modelField = carFieldMapping[key] || key;
        
        // Особая обработка для полей с разными типами
        if (key === 'boosters') {
            processedData.car.has_booster = formData.car[key] > 0;
        } else if (key === 'child_seats') {
            processedData.car.has_child_seat = formData.car[key] > 0;
        } else {
            processedData.car[modelField] = formData.car[key];
        }
    }

    // Явно устанавливаем значение service_type, если его нет
    if (!processedData.car.service_type) {
        processedData.car.service_type = 'Такси'; // Значение по умолчанию
    }

    // Собираем все данные в FormData для отправки на сервер
    const completeFormData = new FormData();

    // Добавляем поля водителя
    for (const key in processedData.driver) {
        completeFormData.append(key, processedData.driver[key]);
    }

    // Добавляем поля автомобиля
    for (const key in processedData.car) {
        completeFormData.append(key, processedData.car[key]);
    }

    // Добавляем файлы из формы водителя
    const driverFileFields = ['passport_front', 'passport_back', 'license_front', 'license_back'];
    driverFileFields.forEach(field => {
        const fileInput = document.getElementById(field);
        if (fileInput && fileInput.files && fileInput.files[0]) {
            completeFormData.append(field, fileInput.files[0]);
        }
    });

    // Добавляем файлы из формы фотографий
    const carFileFields = ['car_front', 'car_back', 'car_right', 'car_left', 'car_interior_front', 
                           'car_interior_back', 'driver_with_license'];
    carFileFields.forEach(field => {
        const fileInput = document.getElementById(field);
        if (fileInput && fileInput.files && fileInput.files[0]) {
            completeFormData.append(field, fileInput.files[0]);
        }
    });

    // Добавляем индикатор загрузки
    const loadingOverlay = $('<div class="loading-overlay"><div class="loading-spinner"></div><div class="loading-text">Создание водителя...</div></div>');
    $('body').append(loadingOverlay);

    // Логгируем данные перед отправкой для отладки
    console.log('Данные для отправки:');
    for (let pair of completeFormData.entries()) {
        console.log(pair[0] + ': ' + pair[1]);
    }
    
    // Отправляем данные на сервер
    $.ajax({
        url: '/api/drivers/create',
        type: 'POST',
        data: completeFormData,
        processData: false,
        contentType: false,
        success: function(response) {
            loadingOverlay.remove();
            
            console.log('Ответ сервера:', response);
            
            // Показываем модальное окно успешного создания
            $('#created-driver-name').text(formData.driver.full_name);
            $('#success-modal').css('display', 'block');
            
            // Сохраняем ID созданного водителя для просмотра
            $('#view-driver').data('driver-id', response.driver_id);
            
            // После успешного создания очищаем сохраненные данные
            clearSavedFormData();
        },
        error: function(xhr, status, error) {
            loadingOverlay.remove();
            
            console.error('Ошибка при создании водителя:', error);
            console.error('Детали:', xhr.responseText);
            console.error('Статус:', xhr.status, xhr.statusText);
            
            // Более подробное логирование объекта ошибки
            console.error('Полный объект ошибки:', {
                error: error,
                xhr: xhr,
                status: status,
                response: xhr.responseText,
                responseJSON: xhr.responseJSON
            });
            
            try {
                const responseData = JSON.parse(xhr.responseText);
                console.log('Подробная информация об ошибке:', responseData);
                
                let errorMessage = 'Ошибка при создании водителя: ';
                if (responseData && responseData.detail) {
                    if (Array.isArray(responseData.detail)) {
                        errorMessage += responseData.detail.map(err => err.msg).join('<br>');
                    } else {
                        errorMessage += responseData.detail;
                    }
                } else {
                    errorMessage += 'Неизвестная ошибка';
                }
                
                showError(errorMessage);
                
                // Отображаем ошибку на странице для удобства отладки
                $('#error-message').html(`<pre>${JSON.stringify(responseData, null, 2)}</pre>`).show();
            } catch (e) {
                // Если не удалось распарсить JSON
                let errorMessage = 'Ошибка при создании водителя: ';
                if (xhr.responseJSON && xhr.responseJSON.detail) {
                    errorMessage += xhr.responseJSON.detail;
                } else if (xhr.responseText) {
                    errorMessage += xhr.responseText;
                } else {
                    errorMessage += 'Неизвестная ошибка';
                }
                
                showError(errorMessage);
                
                // Отображаем сырой текст ошибки
                $('#error-message').html(`<pre>${xhr.responseText || 'Нет текста ошибки'}</pre>`).show();
            }
        }
    });
});

// Обработчики для модального окна
$('.close').click(function() {
    $('#success-modal').css('display', 'none');
});

$(window).click(function(event) {
    if (event.target.id === 'success-modal') {
        $('#success-modal').css('display', 'none');
    }
});

// Кнопка просмотра созданного водителя
$('#view-driver').click(function() {
    const driverId = $(this).data('driver-id');
    window.location.href = `/disp/drivers?id=${driverId}`;
});

// Кнопка создания нового водителя
$('#create-new').click(function() {
    // Сбрасываем все формы
    $('#driver-form, #car-form, #photos-form').trigger('reset');
    
    // Сбрасываем превью фотографий
    $('.file-preview').css('display', 'none');
    $('.upload-icon').show();
    $('.upload-box').css('border', '2px dashed #666');
    $('.photo-preview').css('border', '2px dashed #666').find('.upload-icon').show();
    $('.preview__document').css('display', 'none');
    
    // Сбрасываем отслеживание заполнения форм
    driverFormCompleted = false;
    carFormCompleted = false;
    photosFormCompleted = false;
    
    // Сбрасываем сохраненные данные
    formData = {
        driver: {},
        car: {},
        photos: {}
    };
    
    // Сбрасываем состояние табов
    $('#tab-car, #tab-photos').prop('disabled', true);
    
    // Генерируем новый персональный номер
    $('#personal_number').val(generatePersonalNumber());
    
    // Возвращаемся к первой форме
    switchTab('form-driver');
    
    // Закрываем модальное окно
    $('#success-modal').css('display', 'none');
});

// Добавляем стиль для индикатора загрузки
$('<style>')
    .text(`
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            flex-direction: column;
        }
        
        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #4CAF50;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        .loading-text {
            color: white;
            margin-top: 15px;
            font-size: 16px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    `)
    .appendTo('head');

// Создаем резервную копию данных на случай, если загрузка JSON не удастся
const backupDriverData = {
    "carBrands": [
        "Toyota", "Honda", "Hyundai", "Kia", "Chevrolet", "Nissan", "Lexus", 
        "Mazda", "Mitsubishi", "Volkswagen", "BMW", "Mercedes-Benz", "Audi", 
        "Ford", "Renault", "Lada", "UAZ", "Daewoo", "Skoda", "Subaru"
    ],
    "carModels": {
        "Toyota": ["Camry", "Corolla", "RAV4", "Land Cruiser", "Prius", "Highlander", "Yaris", "Avalon"],
        "Honda": ["Civic", "Accord", "CR-V", "Pilot", "Fit", "HR-V", "Odyssey"],
        "Hyundai": ["Solaris", "Elantra", "Tucson", "Santa Fe", "Creta", "Sonata", "i30", "Accent"],
        "Kia": ["Rio", "Optima", "Sportage", "Sorento", "Cerato", "Soul", "Seltos", "K5"],
        "Chevrolet": ["Cruze", "Aveo", "Spark", "Captiva", "Orlando", "Malibu", "Niva"],
        "Nissan": ["Qashqai", "X-Trail", "Juke", "Almera", "Teana", "Patrol", "Note", "Tiida"],
        "Lexus": ["RX", "ES", "NX", "LX", "IS", "GX", "UX"],
        "Mazda": ["3", "6", "CX-5", "CX-7", "CX-9", "CX-30", "MX-5"],
        "Mitsubishi": ["Outlander", "Pajero", "ASX", "Lancer", "L200", "Eclipse Cross", "Galant"],
        "Volkswagen": ["Polo", "Passat", "Tiguan", "Touareg", "Golf", "Jetta", "Touran"],
        "BMW": ["3 Series", "5 Series", "X3", "X5", "X6", "7 Series", "X1"],
        "Mercedes-Benz": ["E-Class", "C-Class", "S-Class", "GLE", "GLC", "A-Class", "GLA"],
        "Audi": ["A4", "A6", "Q5", "Q7", "A3", "Q3", "A5"],
        "Ford": ["Focus", "Mondeo", "Kuga", "Explorer", "Fiesta", "EcoSport", "Transit"],
        "Renault": ["Logan", "Duster", "Kaptur", "Sandero", "Arkana", "Fluence", "Megane"],
        "Lada": ["Granta", "Vesta", "XRAY", "Largus", "Kalina", "Priora", "Niva"],
        "UAZ": ["Patriot", "Hunter", "Pickup", "Profi", "Буханка", "Хантер"],
        "Daewoo": ["Nexia", "Matiz", "Gentra", "Lanos", "Lacetti"],
        "Skoda": ["Octavia", "Rapid", "Kodiaq", "Superb", "Karoq", "Fabia"],
        "Subaru": ["Forester", "Outback", "Impreza", "XV", "Legacy", "WRX"]
    },
    "carColors": [
        "Белый", "Черный", "Серебристый", "Серый", "Красный", "Синий", "Зеленый", 
        "Коричневый", "Бежевый", "Желтый", "Оранжевый", "Фиолетовый", "Золотой", 
        "Бордовый", "Голубой"
    ],
    "productionYears": [
        "2024", "2023", "2022", "2021", "2020", "2019", "2018", "2017", "2016", 
        "2015", "2014", "2013", "2012", "2011", "2010", "2009", "2008", "2007",
        "2006", "2005", "2004", "2003", "2002", "2001", "2000", "1999", "1998",
        "1997", "1996", "1995", "1994", "1993", "1992", "1991"
    ],
    "transmissionTypes": ["Механическая", "Автоматическая"],
    "boosterOptions": [0, 1, 2, 3, 4, 5],
    "tariffs": ["Эконом", "Комфорт", "Комфорт+", "Бизнес", "Премиум"],
    "categories": ["A", "B", "C", "D", "BE", "CE", "DE"],
    "autoparkCompanies": [
        "ОсОО Титан", "ОсОО Лидер Такси", "ИП Иванов Taxi", "ОсОО ВИП Сервис",
        "ОсОО Комфорт Авто", "ОсОО Автопарк №1", "ОсОО Премиум Транспорт", 
        "ОсОО Бишкек Такси", "ОсОО АвтоМир", "ИП Петров Т.А."
    ],
    "kyrgyzCities": [
        "Бишкек", "Ош", "Джалал-Абад", "Каракол", "Токмок", "Нарын", "Талас",
        "Балыкчы", "Кызыл-Кия", "Узген", "Кара-Балта", "Кант", "Сулюкта",
        "Баткен", "Чолпон-Ата", "Кемин", "Кара-Суу", "Майлуу-Суу", "Исфана", "Кочкор"
    ]
};

// Функция для заполнения селектов данными из JSON
function populateSelects() {
    console.log('Заполнение списков данными...');
            if (!driverData) {
                console.error('Данные не загружены!');
                return;
            }
            
            console.log('Заполняем марки автомобилей:', driverData.carBrands);
            
            // Очищаем и заполняем марки автомобилей
            const carMakeSelect = $('#car_make');
            carMakeSelect.find('option:not(:first)').remove(); // Очищаем текущие опции
            
            driverData.carBrands.forEach(brand => {
                carMakeSelect.append(`<option value="${brand}">${brand}</option>`);
            });
            
            // Обработчик изменения марки для заполнения моделей
            // Удаляем предыдущий обработчик чтобы избежать дублирования
            carMakeSelect.off('change');
            carMakeSelect.on('change', function() {
                const brand = $(this).val();
                const carModelSelect = $('#car_model');
                
                // Очищаем текущие модели
                carModelSelect.find('option:not(:first)').remove();
                
                if (brand && driverData.carModels[brand]) {
                    // Добавляем модели выбранной марки
                    driverData.carModels[brand].forEach(model => {
                        carModelSelect.append(`<option value="${model}">${model}</option>`);
                    });
                    
                    carModelSelect.prop('disabled', false);
                } else {
                    carModelSelect.prop('disabled', true);
                }
                
                // Если есть сохраненное значение для модели, устанавливаем его
                const savedModel = localStorage.getItem('car_model');
                if (savedModel && brand && driverData.carModels[brand].includes(savedModel)) {
                    carModelSelect.val(savedModel);
                }
            });
            
            // Заполняем цвета
            const carColorSelect = $('#car_color');
            carColorSelect.find('option:not(:first)').remove(); // Очищаем текущие опции
            driverData.carColors.forEach(color => {
                carColorSelect.append(`<option value="${color}">${color}</option>`);
            });
            
            // Заполняем годы выпуска
            const carYearSelect = $('#car_year');
            carYearSelect.find('option:not(:first)').remove(); // Очищаем текущие опции
            driverData.productionYears.forEach(year => {
                carYearSelect.append(`<option value="${year}">${year}</option>`);
            });
            
            // Заполняем типы КПП
            const transmissionSelect = $('#transmission');
            transmissionSelect.find('option:not(:first)').remove(); // Очищаем текущие опции
            driverData.transmissionTypes.forEach(type => {
                transmissionSelect.append(`<option value="${type}">${type}</option>`);
            });
            
            // Заполняем кол-во бустеров
            const boostersSelect = $('#boosters');
            boostersSelect.find('option:not(:first)').remove(); // Очищаем текущие опции
            driverData.boosterOptions.forEach(count => {
                boostersSelect.append(`<option value="${count}">${count}</option>`);
            });
            
            // Заполняем тарифы
            const tariffSelect = $('#tariff');
            tariffSelect.find('option:not(:first)').remove(); // Очищаем текущие опции
            driverData.tariffs.forEach(tariff => {
                tariffSelect.append(`<option value="${tariff}">${tariff}</option>`);
            });
            
            // Заполняем категории
            const categorySelect = $('#category');
            categorySelect.find('option:not(:first)').remove(); // Очищаем текущие опции
            driverData.categories.forEach(category => {
                categorySelect.append(`<option value="${category}">${category}</option>`);
            });
            
            // Заполняем автопарки
            const autoparkSelect = $('#autopark');
            autoparkSelect.find('option:not(:first)').remove(); // Очищаем текущие опции
            driverData.autoparkCompanies.forEach(company => {
                autoparkSelect.append(`<option value="${company}">${company}</option>`);
            });
            
            // Заполняем города
            const citySelect = $('#city');
            citySelect.find('option:not(:first)').remove(); // Очищаем текущие опции
            
            // Проверяем наличие списка городов в driverData
            if (driverData.kyrgyzCities && driverData.kyrgyzCities.length > 0) {
                console.log('Заполняем города из JSON:', driverData.kyrgyzCities);
                driverData.kyrgyzCities.forEach(city => {
                    citySelect.append(`<option value="${city}">${city}</option>`);
                });
            } else {
                // Если список городов отсутствует, добавляем хотя бы один город
                console.log('Список городов отсутствует, добавляем базовые города');
                const defaultCities = ['Бишкек', 'Ош', 'Джалал-Абад', 'Каракол', 'Баткен', 'Талас', 'Нарын'];
                defaultCities.forEach(city => {
                    citySelect.append(`<option value="${city}">${city}</option>`);
                });
            }
            
            // Проверяем, заполнен ли select городами
            if (citySelect.find('option').length <= 1) { // Только опция "Выберите город"
                console.warn('Селект городов все еще пуст, добавляем город Бишкек');
                citySelect.append(`<option value="Бишкек">Бишкек</option>`);
                // Выбираем Бишкек по умолчанию
                citySelect.val('Бишкек');
            }
            
            console.log('Селекты заполнены данными успешно');
        }
        
        // Функция для загрузки JSON данных
        function loadDriverData() {
            // Предотвращаем повторную загрузку
            if (dataLoaded) {
                console.log('Данные уже были загружены ранее');
                
                // Проверяем, есть ли города в загруженных данных
                if (!driverData.kyrgyzCities || driverData.kyrgyzCities.length === 0) {
                    console.warn('В загруженных данных отсутствуют города, добавляем их из резервных данных');
                    driverData.kyrgyzCities = backupDriverData.kyrgyzCities;
                    // Обновляем кэш
                    localStorage.setItem('driverData', JSON.stringify(driverData));
                    // Перезаполняем список городов
                    const citySelect = $('#city');
                    citySelect.find('option:not(:first)').remove();
                    driverData.kyrgyzCities.forEach(city => {
                        citySelect.append(`<option value="${city}">${city}</option>`);
                    });
                }
                
                return;
            }
            
            console.log('Попытка загрузки данных из JSON...');
            
            // Проверяем наличие данных в localStorage
            const cachedData = localStorage.getItem('driverData');
            if (cachedData) {
                try {
                    console.log('Найдены данные в localStorage');
                    driverData = JSON.parse(cachedData);
                    
                    // Проверяем наличие kyrgyzCities в кэше
                    if (!driverData.kyrgyzCities || driverData.kyrgyzCities.length === 0) {
                        console.warn('В кэше отсутствуют города, добавляем их из резервных данных');
                        driverData.kyrgyzCities = backupDriverData.kyrgyzCities;
                        // Обновляем кэш
                        localStorage.setItem('driverData', JSON.stringify(driverData));
                    }
                    
                    populateSelects();
                    loadSavedFormData();
                    dataLoaded = true;
                    return;
                } catch (e) {
                    console.error('Ошибка при загрузке из localStorage:', e);
                    localStorage.removeItem('driverData');
                }
            }
            
            // Получаем базовый URL текущей страницы
            const baseUrl = window.location.origin;
            const jsonUrl = `${baseUrl}/static/assets/js/driver_data.json`;
            
            console.log('URL для загрузки JSON:', jsonUrl);
            
            fetch(jsonUrl, {
                method: 'GET',
                headers: {
                    'Cache-Control': 'no-cache',
                    'Pragma': 'no-cache'
                }
            })
            .then(response => {
                console.log('Статус ответа:', response.status);
                if (!response.ok) {
                    throw new Error('Ошибка загрузки данных: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                console.log('Данные JSON получены:', data);
                driverData = data;
                
                // Проверяем наличие городов в полученных данных
                if (!driverData.kyrgyzCities || driverData.kyrgyzCities.length === 0) {
                    console.warn('В полученных данных отсутствуют города, добавляем их из резервных данных');
                    driverData.kyrgyzCities = backupDriverData.kyrgyzCities;
                }
                
                // Сохраняем в localStorage для дальнейшего использования
                localStorage.setItem('driverData', JSON.stringify(driverData));
                
                // Заполняем селекты после загрузки данных
                populateSelects();
                
                // Проверяем, есть ли сохраненные данные
                loadSavedFormData();
                
                dataLoaded = true;
            })
            .catch(error => {
                console.error('Ошибка при загрузке данных:', error);
                
                // Пробуем загрузить через jQuery AJAX как резервный вариант
                const ajaxJsonUrl = `${baseUrl}/static/assets/js/driver_data.json`;
                console.log('Пробуем AJAX запрос к:', ajaxJsonUrl);
                
                $.ajax({
                    url: ajaxJsonUrl,
                    type: 'GET',
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        console.log('Данные JSON получены через jQuery AJAX:', data);
                        driverData = data;
                        
                        // Проверяем наличие городов в полученных данных
                        if (!driverData.kyrgyzCities || driverData.kyrgyzCities.length === 0) {
                            console.warn('В полученных через AJAX данных отсутствуют города, добавляем их из резервных данных');
                            driverData.kyrgyzCities = backupDriverData.kyrgyzCities;
                        }
                        
                        // Сохраняем в localStorage для дальнейшего использования
                        localStorage.setItem('driverData', JSON.stringify(driverData));
                        
                        populateSelects();
                        loadSavedFormData();
                        dataLoaded = true;
                    },
                    error: function(xhr, status, error) {
                        console.error('Ошибка при загрузке данных через jQuery AJAX:', error);
                        console.error('Детали ошибки AJAX:', xhr.status, xhr.statusText);
                        
                        // Используем локальные данные, если все запросы к серверу не удались
                        console.log('Используем резервные данные...');
                        driverData = backupDriverData;
                        
                        // Сохраняем резервные данные в localStorage
                        localStorage.setItem('driverData', JSON.stringify(driverData));
                        
                        populateSelects();
                        loadSavedFormData();
                        dataLoaded = true;
                        
                        showError('Использованы локальные данные. Некоторые функции могут быть ограничены.');
                    }
                });
            });
        }
        
        // Сохранение данных формы в localStorage
        function saveFormData() {
            // Сохраняем все значения полей формы водителя
            const driverFormData = getFormData('driver-form');
            for (const key in driverFormData) {
                localStorage.setItem(key, driverFormData[key]);
            }
            
            // Сохраняем все значения полей формы автомобиля
            const carFormData = getFormData('car-form');
            for (const key in carFormData) {
                localStorage.setItem(key, carFormData[key]);
            }
            
            // Сохраняем прогресс заполнения
            localStorage.setItem('driverFormCompleted', driverFormCompleted);
            localStorage.setItem('carFormCompleted', carFormCompleted);
            localStorage.setItem('formStep', $('.form-section:visible').attr('id'));
            
            console.log('Данные форм сохранены в localStorage');
        }
        
        // Загрузка сохраненных данных форм из localStorage
        function loadSavedFormData() {
            // Проверяем, есть ли сохраненные данные для формы водителя
            const driverFormInputs = $('#driver-form input:not([type="file"]), #driver-form select');
            let hasDriverData = false;
            
            driverFormInputs.each(function() {
                const fieldName = $(this).attr('name');
                const savedValue = localStorage.getItem(fieldName);
                
                if (savedValue !== null) {
                    hasDriverData = true;
                    
                    if ($(this).is(':checkbox')) {
                        $(this).prop('checked', savedValue === 'true');
                    } else {
                        $(this).val(savedValue);
                    }
                }
            });
            
            // Проверяем, есть ли сохраненные данные для формы автомобиля
            const carFormInputs = $('#car-form input, #car-form select');
            let hasCarData = false;
            
            carFormInputs.each(function() {
                const fieldName = $(this).attr('name');
                const savedValue = localStorage.getItem(fieldName);
                
                if (savedValue !== null) {
                    hasCarData = true;
                    
                    if ($(this).is(':checkbox')) {
                        $(this).prop('checked', savedValue === 'true');
                    } else {
                        $(this).val(savedValue);
                    }
                }
            });
            
            // Инициализируем зависимые списки (например, модели автомобилей)
            if (hasCarData) {
                const carMake = localStorage.getItem('car_make');
                if (carMake) {
                    $('#car_make').trigger('change');
                }
            }
            
            // Восстанавливаем состояние заполнения форм
            const savedDriverFormCompleted = localStorage.getItem('driverFormCompleted') === 'true';
            const savedCarFormCompleted = localStorage.getItem('carFormCompleted') === 'true';
            const savedFormStep = localStorage.getItem('formStep');
            
            if (savedDriverFormCompleted) {
                driverFormCompleted = true;
                $('#tab-car').prop('disabled', false);
            }
            
            if (savedCarFormCompleted) {
                carFormCompleted = true;
                $('#tab-photos').prop('disabled', false);
            }
            
            // Переключаемся на сохраненный шаг формы, если такой есть
            if (savedFormStep) {
                switchTab(savedFormStep);
            }
            
            console.log('Данные форм загружены из localStorage');
        }
        
        // Очистка сохраненных данных
        function clearSavedFormData() {
            localStorage.removeItem('driverFormCompleted');
            localStorage.removeItem('carFormCompleted');
            localStorage.removeItem('formStep');
            
            const allInputs = $('#driver-form input:not([type="file"]), #driver-form select, #car-form input, #car-form select');
            allInputs.each(function() {
                localStorage.removeItem($(this).attr('name'));
            });
            
            console.log('Сохраненные данные форм очищены');
        }
        
        // Сохраняем данные при переключении между табами
        function saveAndSwitchTab(tabId) {
            saveFormData();
            switchTab(tabId);
        }
        
        // Модифицируем обработчики кнопок для сохранения данных
        $('#driver-next').click(function() {
            console.log("Клик по кнопке 'Продолжить' в форме водителя");
            if (validateForm('driver-form')) {
                driverFormCompleted = true;
                formData.driver = getFormData('driver-form');
                console.log("Данные водителя:", formData.driver);
                
                // Разблокируем второй таб
                $('#tab-car').prop('disabled', false);
                
                // Сохраняем и переходим к форме автомобиля
                saveAndSwitchTab('form-car');
            }
        });
        
        $('#car-next').click(function() {
            console.log("Клик по кнопке 'Продолжить' в форме автомобиля");
            if (validateForm('car-form')) {
                carFormCompleted = true;
                formData.car = getFormData('car-form');
                console.log("Данные автомобиля:", formData.car);
                
                // Разблокируем третий таб
                $('#tab-photos').prop('disabled', false);
                
                // Сохраняем и переходим к форме фотографий
                saveAndSwitchTab('form-photos');
            }
        });
        
        // Обновляем обработчик успешного создания водителя
        $('#save-all').click(function() {
            console.log("Клик по кнопке 'Создать водителя'");
            
            // Проверяем все формы последовательно
            if (!validateForm('driver-form')) {
                // Если форма водителя не валидна, переключаемся на неё
                switchTab('form-driver');
                return;
            }
            
            if (!validateForm('car-form')) {
                // Если форма автомобиля не валидна, переключаемся на неё
                switchTab('form-car');
                return;
            }
            
            if (!validateForm('photos-form')) {
                // Если форма фотографий не валидна, остаемся на текущей
                return;
            }
            
            // Если все формы валидны, собираем данные
            photosFormCompleted = true;
            formData.driver = getFormData('driver-form');
            formData.car = getFormData('car-form');
            formData.photos = getFormData('photos-form');
            
            console.log("Данные водителя:", formData.driver);
            console.log("Данные автомобиля:", formData.car);
            console.log("Данные фотографий:", formData.photos);
            
            // Проверяем соответствие данных требованиям модели
            if (!validateApiData()) {
                return;
            }
            
            // Маппинг полей клиента на поля модели
            const driverFieldMapping = {
                'full_name': 'full_name',
                'birth_date': 'birthdate',               // в модели birthdate, в форме birth_date
                'personal_number': 'unique_id',          // в модели unique_id, в форме personal_number
                'phone': 'phone',
                'driver_license': 'driver_license_number', // в модели driver_license_number
                'license_issue_date': 'driver_license_issue_date',
                'license_expiry_date': 'license_expiry_date',
                'address': 'address',
                'callsign': 'callsign',
                'tariff': 'tariff',
                'city': 'city'
            };

            // Маппинг полей автомобиля
            const carFieldMapping = {
                'car_make': 'brand',             // в модели brand, в форме car_make
                'car_model': 'model',            // в модели model, в форме car_model
                'car_color': 'color',            // в модели color, в форме car_color
                'car_year': 'year',              // в модели year, в форме car_year
                'transmission': 'transmission',
                'boosters': 'has_booster',       // в модели has_booster (bool), в форме boosters (число)
                'child_seats': 'has_child_seat', // в модели has_child_seat (bool), в форме child_seats (число)
                'is_park_car': 'is_park_car',
                'license_plate': 'license_plate',
                'vin': 'vin',
                'body_number': 'body_number',
                'registration': 'registration',
                'has_sticker': 'has_sticker',
                'has_lightbox': 'has_lightbox',
                'service': 'service_type',       // в модели service_type, в форме service
                'category': 'category',
                'tariff': 'tariff'
            };

            // Создаем финальный объект данных с правильными именами полей
            const processedData = {
                driver: {},
                car: {}
            };

            // Обрабатываем поля водителя
            for (const key in formData.driver) {
                // Игнорируем поле birth_date, так как мы используем birthdate
                if (key === 'birth_date') {
                    const dateValue = formData.driver[key];
                    if (dateValue) {
                        let birthdate = dateValue;
                        
                        // Если дата в формате DD.MM.YYYY, конвертируем в YYYY-MM-DD
                        if (dateValue.includes('.')) {
                            const parts = dateValue.split('.');
                            if (parts.length === 3) {
                                birthdate = `${parts[2]}-${parts[1]}-${parts[0]}`;
                            }
                        }
                        
                        processedData.driver.birthdate = birthdate;
                    }
                    continue;
                }
                
                // Проверяем, нужно ли переименовать поле согласно маппингу
                const modelField = driverFieldMapping[key] || key;
                processedData.driver[modelField] = formData.driver[key];
            }

            // Добавляем обязательное поле city, если оно не было добавлено
            if (!processedData.driver.city) {
                processedData.driver.city = $('#city').val() || 'Бишкек';
            }

            // Преобразуем personal_number в unique_id
            if (formData.driver.personal_number && !processedData.driver.unique_id) {
                processedData.driver.unique_id = formData.driver.personal_number;
            }

            // Обрабатываем поля автомобиля
            for (const key in formData.car) {
                // Проверяем, нужно ли переименовать поле согласно маппингу
                const modelField = carFieldMapping[key] || key;
                
                // Особая обработка для полей с разными типами
                if (key === 'boosters') {
                    processedData.car.has_booster = formData.car[key] > 0;
                } else if (key === 'child_seats') {
                    processedData.car.has_child_seat = formData.car[key] > 0;
                } else {
                    processedData.car[modelField] = formData.car[key];
                }
            }

            // Явно устанавливаем значение service_type, если его нет
            if (!processedData.car.service_type) {
                processedData.car.service_type = 'Такси'; // Значение по умолчанию
            }

            // Собираем все данные в FormData для отправки на сервер
            const completeFormData = new FormData();

            // Добавляем поля водителя
            for (const key in processedData.driver) {
                completeFormData.append(key, processedData.driver[key]);
            }

            // Добавляем поля автомобиля
            for (const key in processedData.car) {
                completeFormData.append(key, processedData.car[key]);
            }

            // Добавляем файлы из формы водителя
            const driverFileFields = ['passport_front', 'passport_back', 'license_front', 'license_back'];
            driverFileFields.forEach(field => {
                const fileInput = document.getElementById(field);
                if (fileInput && fileInput.files && fileInput.files[0]) {
                    completeFormData.append(field, fileInput.files[0]);
                }
            });

            // Добавляем файлы из формы фотографий
            const carFileFields = ['car_front', 'car_back', 'car_right', 'car_left', 'car_interior_front', 
                                   'car_interior_back', 'driver_with_license'];
            carFileFields.forEach(field => {
                const fileInput = document.getElementById(field);
                if (fileInput && fileInput.files && fileInput.files[0]) {
                    completeFormData.append(field, fileInput.files[0]);
                }
            });

            // Добавляем индикатор загрузки
            const loadingOverlay = $('<div class="loading-overlay"><div class="loading-spinner"></div><div class="loading-text">Создание водителя...</div></div>');
            $('body').append(loadingOverlay);

            // Логгируем данные перед отправкой для отладки
            console.log('Данные для отправки:');
            for (let pair of completeFormData.entries()) {
                console.log(pair[0] + ': ' + pair[1]);
            }
            
            // Отправляем данные на сервер
            $.ajax({
                url: '/api/drivers/create',
                type: 'POST',
                data: completeFormData,
                processData: false,
                contentType: false,
                success: function(response) {
                    loadingOverlay.remove();
                    
                    console.log('Ответ сервера:', response);
                    
                    // Показываем модальное окно успешного создания
                    $('#created-driver-name').text(formData.driver.full_name);
                    $('#success-modal').css('display', 'block');
                    
                    // Сохраняем ID созданного водителя для просмотра
                    $('#view-driver').data('driver-id', response.driver_id);
                    
                    // После успешного создания очищаем сохраненные данные
                    clearSavedFormData();
                },
                error: function(xhr, status, error) {
                    loadingOverlay.remove();
                    
                    console.error('Ошибка при создании водителя:', error);
                    console.error('Детали:', xhr.responseText);
                    console.error('Статус:', xhr.status, xhr.statusText);
                    
                    // Более подробное логирование объекта ошибки
                    console.error('Полный объект ошибки:', {
                        error: error,
                        xhr: xhr,
                        status: status,
                        response: xhr.responseText,
                        responseJSON: xhr.responseJSON
                    });
                    
                    try {
                        const responseData = JSON.parse(xhr.responseText);
                        console.log('Подробная информация об ошибке:', responseData);
                        
                        let errorMessage = 'Ошибка при создании водителя: ';
                        if (responseData && responseData.detail) {
                            if (Array.isArray(responseData.detail)) {
                                errorMessage += responseData.detail.map(err => err.msg).join('<br>');
                            } else {
                                errorMessage += responseData.detail;
                            }
                        } else {
                            errorMessage += 'Неизвестная ошибка';
                        }
                        
                        showError(errorMessage);
                        
                        // Отображаем ошибку на странице для удобства отладки
                        $('#error-message').html(`<pre>${JSON.stringify(responseData, null, 2)}</pre>`).show();
                    } catch (e) {
                        // Если не удалось распарсить JSON
                        let errorMessage = 'Ошибка при создании водителя: ';
                        if (xhr.responseJSON && xhr.responseJSON.detail) {
                            errorMessage += xhr.responseJSON.detail;
                        } else if (xhr.responseText) {
                            errorMessage += xhr.responseText;
                        } else {
                            errorMessage += 'Неизвестная ошибка';
                        }
                        
                        showError(errorMessage);
                        
                        // Отображаем сырой текст ошибки
                        $('#error-message').html(`<pre>${xhr.responseText || 'Нет текста ошибки'}</pre>`).show();
                    }
                }
            });
        });
        
        // Запускаем загрузку данных
        loadDriverData();
        
        // Обработчик события перед закрытием страницы
        window.addEventListener('beforeunload', function() {
            saveFormData();
        });
        
        // Добавим обработчик для отладки, который выполнится при полной загрузке DOM
        $(document).ready(function() {
            console.log('DOM полностью загружен');
            console.log('jQuery версия:', $.fn.jquery);
            console.log('InputMask загружен:', typeof $.fn.inputmask !== 'undefined');
            console.log('Flatpickr загружен:', typeof flatpickr !== 'undefined');
            
            // Добавляем скрытые поля для обязательных параметров модели Driver, которых нет в форме
            $('#driver-form').append(`
                <!-- Скрытые поля для обязательных параметров модели Driver -->
                <input type="hidden" id="city" name="city" value="Бишкек">
            `);
            
            // Добавляем кнопку для отладки HTTP запросов
            $('#error-message').after('<div id="debug-bar" style="margin-bottom: 20px;"></div>');
            $('#debug-bar').append('<button id="clear-cache" class="main__btn" style="margin-right: 10px;">Очистить кэш данных</button>');
            $('#debug-bar').append('<button id="debug-forms" class="main__btn" style="background-color: #3498db;">Показать данные форм</button>');
            
            $('#clear-cache').click(function(e) {
                e.preventDefault();
                localStorage.removeItem('driverData');
                dataLoaded = false;
                driverData = null;
                
                // Очищаем все select-элементы
                $('select').each(function() {
                    $(this).find('option:not(:first)').remove();
                });
                
                console.log('Кэш данных очищен');
                showError('Кэш данных очищен. Перезагрузите страницу.');
                
                // Перезагружаем данные
                loadDriverData();
            });
            
            $('#debug-forms').click(function(e) {
                e.preventDefault();
                formData.driver = getFormData('driver-form');
                formData.car = getFormData('car-form');
                formData.photos = getFormData('photos-form');
                
                console.log('Текущие данные форм:', formData);
                alert('Данные форм выведены в консоль для отладки');
            });
            
            // Если данные еще не загружены, запускаем загрузку
            if (!dataLoaded) {
                console.log('Данные еще не загружены, запускаем загрузку...');
                loadDriverData();
            }
        });
        
        // Функция для очистки всех данных
        function clearAllData() {
            // Очищаем localStorage
            clearSavedFormData();
            
            // Очищаем все поля форм
            $('#driver-form, #car-form, #photos-form').each(function() {
                this.reset();
            });
            
            // Очищаем превью файлов
            $('.file-preview').empty();
            $('.document-preview').empty();
            
            // Сбрасываем прогресс
            setProgressStep(1);
            
            // Переключаемся на первую вкладку
            switchTab('form-driver');
            
            // Генерируем новый личный номер
            $('#personal_number').val(generatePersonalNumber());
            
            // Очищаем модальные окна
            $('#error-message').hide();
            $('#success-modal').hide();
            
            // Сбрасываем состояние объекта formData
            formData = {
                driver: {},
                car: {},
                photos: {}
            };
            
            showSuccess('Все данные успешно очищены');
        }
        
        // Привязываем функцию к кнопке очистки данных
        $('#full-reset-button').click(function() {
            if (confirm('Вы уверены, что хотите полностью сбросить все данные? Это действие нельзя отменить.')) {
                clearAllData();
            }
        });
        
        // Также привязываем очистку к существующей кнопке
        $('#clear-cache').click(function() {
            clearAllData();
        });
    });
</script>
{% endblock %}